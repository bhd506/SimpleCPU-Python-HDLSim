-- File: cpu.vhd
-- Generated by MyHDL 0.11.51
-- Date:    Thu Apr 24 07:40:44 2025 UTC


library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use std.textio.all;

use work.pck_myhdl_011.all;

entity cpu is
    port (
        DATA_IN: in unsigned(15 downto 0);
        CLK: in std_logic;
        CLR: in std_logic;
        DATA_OUT: out unsigned(15 downto 0);
        ADDR: out unsigned(7 downto 0);
        RAM_EN: out std_logic;
        RAM_WR: out std_logic;
        ROM_EN: out std_logic
    );
end entity cpu;
-- Top-level CPU block with 8-bit datapath and 16-bit instruction word
-- 
-- Inputs:
-- - DATA_IN: Bus(16) — input from memory
-- - CLK: Clock signal
-- - CLR: Asynchronous reset
-- 
-- Outputs:
-- - DATA_OUT: Bus(16) — output to memory or peripherals
-- - ADDR: Bus(8) — address output for memory access
-- - RAM_EN: RAM enable
-- - RAM_WR: RAM write enable
-- - ROM_EN: ROM enable
-- 
-- io (IO_Capture):
-- - Captures internal signals for waveform/debugging
-- 
-- Internal Components:
-- - IR: 16-bit instruction register
-- - PC: 8-bit program counter
-- - ACC: 8-bit accumulator
-- - ALU: Arithmetic Logic Unit
-- - Control logic: Generates control signals from instruction and stage
-- 
-- Core Logic:
-- - Handles fetch, decode, execute cycle
-- - Connects and coordinates all datapath and control components

architecture MyHDL of cpu is



signal IR: unsigned(15 downto 0);
signal PC: unsigned(7 downto 0);
signal ACC: unsigned(7 downto 0);
signal ALU: unsigned(7 downto 0);
signal DATA: unsigned(7 downto 0);
signal ACC_CTL: unsigned(2 downto 0);
signal IR_EN: std_logic;
signal ACC_EN: std_logic;
signal PC_EN: std_logic;
signal PC_LD: std_logic;
signal DATA_SEL: std_logic;
signal ADDR_SEL: std_logic;
signal Z: std_logic;
signal DATA_OUT_0: unsigned(7 downto 0);
signal DATA_OUT_1: unsigned(3 downto 0);
signal DATA_OUT_2: unsigned(3 downto 0);
signal register_160_fdce0_Q: std_logic;
signal register_160_fdce1_Q: std_logic;
signal register_160_fdce2_Q: std_logic;
signal register_160_fdce3_Q: std_logic;
signal register_160_fdce4_Q: std_logic;
signal register_160_fdce5_Q: std_logic;
signal register_160_fdce6_Q: std_logic;
signal register_160_fdce7_Q: std_logic;
signal register_160_fdce8_Q: std_logic;
signal register_160_fdce9_Q: std_logic;
signal register_160_fdce10_Q: std_logic;
signal register_160_fdce11_Q: std_logic;
signal register_160_fdce12_Q: std_logic;
signal register_160_fdce13_Q: std_logic;
signal register_160_fdce14_Q: std_logic;
signal register_160_fdce15_Q: std_logic;
signal register_80_fdce16_Q: std_logic;
signal register_80_fdce17_Q: std_logic;
signal register_80_fdce18_Q: std_logic;
signal register_80_fdce19_Q: std_logic;
signal register_80_fdce20_Q: std_logic;
signal register_80_fdce21_Q: std_logic;
signal register_80_fdce22_Q: std_logic;
signal register_80_fdce23_Q: std_logic;
signal counter_80_MUX: unsigned(7 downto 0);
signal counter_80_SUM: unsigned(7 downto 0);
signal counter_80_notLD: std_logic;
signal counter_80_COUT: std_logic;
signal counter_80_zero: unsigned(7 downto 0);
signal counter_80_mux_2_80_mux_2_10_Y: std_logic;
signal counter_80_mux_2_80_mux_2_10_notSEL: std_logic;
signal counter_80_mux_2_80_mux_2_10_AND_1: std_logic;
signal counter_80_mux_2_80_mux_2_10_AND_2: std_logic;
signal counter_80_mux_2_80_mux_2_11_Y: std_logic;
signal counter_80_mux_2_80_mux_2_11_notSEL: std_logic;
signal counter_80_mux_2_80_mux_2_11_AND_1: std_logic;
signal counter_80_mux_2_80_mux_2_11_AND_2: std_logic;
signal counter_80_mux_2_80_mux_2_12_Y: std_logic;
signal counter_80_mux_2_80_mux_2_12_notSEL: std_logic;
signal counter_80_mux_2_80_mux_2_12_AND_1: std_logic;
signal counter_80_mux_2_80_mux_2_12_AND_2: std_logic;
signal counter_80_mux_2_80_mux_2_13_Y: std_logic;
signal counter_80_mux_2_80_mux_2_13_notSEL: std_logic;
signal counter_80_mux_2_80_mux_2_13_AND_1: std_logic;
signal counter_80_mux_2_80_mux_2_13_AND_2: std_logic;
signal counter_80_mux_2_80_mux_2_14_Y: std_logic;
signal counter_80_mux_2_80_mux_2_14_notSEL: std_logic;
signal counter_80_mux_2_80_mux_2_14_AND_1: std_logic;
signal counter_80_mux_2_80_mux_2_14_AND_2: std_logic;
signal counter_80_mux_2_80_mux_2_15_Y: std_logic;
signal counter_80_mux_2_80_mux_2_15_notSEL: std_logic;
signal counter_80_mux_2_80_mux_2_15_AND_1: std_logic;
signal counter_80_mux_2_80_mux_2_15_AND_2: std_logic;
signal counter_80_mux_2_80_mux_2_16_Y: std_logic;
signal counter_80_mux_2_80_mux_2_16_notSEL: std_logic;
signal counter_80_mux_2_80_mux_2_16_AND_1: std_logic;
signal counter_80_mux_2_80_mux_2_16_AND_2: std_logic;
signal counter_80_mux_2_80_mux_2_17_Y: std_logic;
signal counter_80_mux_2_80_mux_2_17_notSEL: std_logic;
signal counter_80_mux_2_80_mux_2_17_AND_1: std_logic;
signal counter_80_mux_2_80_mux_2_17_AND_2: std_logic;
signal counter_80_add_80_full_adder0_SUM: std_logic;
signal counter_80_add_80_full_adder0_COUT: std_logic;
signal counter_80_add_80_full_adder0_SUM_1: std_logic;
signal counter_80_add_80_full_adder0_COUT_1: std_logic;
signal counter_80_add_80_full_adder0_COUT_2: std_logic;
signal counter_80_add_80_full_adder1_SUM: std_logic;
signal counter_80_add_80_full_adder1_COUT: std_logic;
signal counter_80_add_80_full_adder1_SUM_1: std_logic;
signal counter_80_add_80_full_adder1_COUT_1: std_logic;
signal counter_80_add_80_full_adder1_COUT_2: std_logic;
signal counter_80_add_80_full_adder2_SUM: std_logic;
signal counter_80_add_80_full_adder2_COUT: std_logic;
signal counter_80_add_80_full_adder2_SUM_1: std_logic;
signal counter_80_add_80_full_adder2_COUT_1: std_logic;
signal counter_80_add_80_full_adder2_COUT_2: std_logic;
signal counter_80_add_80_full_adder3_SUM: std_logic;
signal counter_80_add_80_full_adder3_COUT: std_logic;
signal counter_80_add_80_full_adder3_SUM_1: std_logic;
signal counter_80_add_80_full_adder3_COUT_1: std_logic;
signal counter_80_add_80_full_adder3_COUT_2: std_logic;
signal counter_80_add_80_full_adder4_SUM: std_logic;
signal counter_80_add_80_full_adder4_COUT: std_logic;
signal counter_80_add_80_full_adder4_SUM_1: std_logic;
signal counter_80_add_80_full_adder4_COUT_1: std_logic;
signal counter_80_add_80_full_adder4_COUT_2: std_logic;
signal counter_80_add_80_full_adder5_SUM: std_logic;
signal counter_80_add_80_full_adder5_COUT: std_logic;
signal counter_80_add_80_full_adder5_SUM_1: std_logic;
signal counter_80_add_80_full_adder5_COUT_1: std_logic;
signal counter_80_add_80_full_adder5_COUT_2: std_logic;
signal counter_80_add_80_full_adder6_SUM: std_logic;
signal counter_80_add_80_full_adder6_COUT: std_logic;
signal counter_80_add_80_full_adder6_SUM_1: std_logic;
signal counter_80_add_80_full_adder6_COUT_1: std_logic;
signal counter_80_add_80_full_adder6_COUT_2: std_logic;
signal counter_80_add_80_full_adder7_SUM: std_logic;
signal counter_80_add_80_full_adder7_SUM_1: std_logic;
signal counter_80_add_80_full_adder7_COUT_1: std_logic;
signal counter_80_add_80_full_adder7_COUT_2: std_logic;
signal counter_80_register_81_fdce24_Q: std_logic;
signal counter_80_register_81_fdce25_Q: std_logic;
signal counter_80_register_81_fdce26_Q: std_logic;
signal counter_80_register_81_fdce27_Q: std_logic;
signal counter_80_register_81_fdce28_Q: std_logic;
signal counter_80_register_81_fdce29_Q: std_logic;
signal counter_80_register_81_fdce30_Q: std_logic;
signal counter_80_register_81_fdce31_Q: std_logic;
signal alu0_ADD_SUB: unsigned(7 downto 0);
signal alu0_AND: unsigned(7 downto 0);
signal alu0_add_sub_80_COUT: std_logic;
signal alu0_add_sub_80_XOR_OUT: unsigned(7 downto 0);
signal alu0_add_sub_80_CTL_BUS: unsigned(7 downto 0);
signal alu0_add_sub_80_add_81_full_adder8_SUM: std_logic;
signal alu0_add_sub_80_add_81_full_adder8_COUT: std_logic;
signal alu0_add_sub_80_add_81_full_adder8_SUM_1: std_logic;
signal alu0_add_sub_80_add_81_full_adder8_COUT_1: std_logic;
signal alu0_add_sub_80_add_81_full_adder8_COUT_2: std_logic;
signal alu0_add_sub_80_add_81_full_adder9_SUM: std_logic;
signal alu0_add_sub_80_add_81_full_adder9_COUT: std_logic;
signal alu0_add_sub_80_add_81_full_adder9_SUM_1: std_logic;
signal alu0_add_sub_80_add_81_full_adder9_COUT_1: std_logic;
signal alu0_add_sub_80_add_81_full_adder9_COUT_2: std_logic;
signal alu0_add_sub_80_add_81_full_adder10_SUM: std_logic;
signal alu0_add_sub_80_add_81_full_adder10_COUT: std_logic;
signal alu0_add_sub_80_add_81_full_adder10_SUM_1: std_logic;
signal alu0_add_sub_80_add_81_full_adder10_COUT_1: std_logic;
signal alu0_add_sub_80_add_81_full_adder10_COUT_2: std_logic;
signal alu0_add_sub_80_add_81_full_adder11_SUM: std_logic;
signal alu0_add_sub_80_add_81_full_adder11_COUT: std_logic;
signal alu0_add_sub_80_add_81_full_adder11_SUM_1: std_logic;
signal alu0_add_sub_80_add_81_full_adder11_COUT_1: std_logic;
signal alu0_add_sub_80_add_81_full_adder11_COUT_2: std_logic;
signal alu0_add_sub_80_add_81_full_adder12_SUM: std_logic;
signal alu0_add_sub_80_add_81_full_adder12_COUT: std_logic;
signal alu0_add_sub_80_add_81_full_adder12_SUM_1: std_logic;
signal alu0_add_sub_80_add_81_full_adder12_COUT_1: std_logic;
signal alu0_add_sub_80_add_81_full_adder12_COUT_2: std_logic;
signal alu0_add_sub_80_add_81_full_adder13_SUM: std_logic;
signal alu0_add_sub_80_add_81_full_adder13_COUT: std_logic;
signal alu0_add_sub_80_add_81_full_adder13_SUM_1: std_logic;
signal alu0_add_sub_80_add_81_full_adder13_COUT_1: std_logic;
signal alu0_add_sub_80_add_81_full_adder13_COUT_2: std_logic;
signal alu0_add_sub_80_add_81_full_adder14_SUM: std_logic;
signal alu0_add_sub_80_add_81_full_adder14_COUT: std_logic;
signal alu0_add_sub_80_add_81_full_adder14_SUM_1: std_logic;
signal alu0_add_sub_80_add_81_full_adder14_COUT_1: std_logic;
signal alu0_add_sub_80_add_81_full_adder14_COUT_2: std_logic;
signal alu0_add_sub_80_add_81_full_adder15_SUM: std_logic;
signal alu0_add_sub_80_add_81_full_adder15_SUM_1: std_logic;
signal alu0_add_sub_80_add_81_full_adder15_COUT_1: std_logic;
signal alu0_add_sub_80_add_81_full_adder15_COUT_2: std_logic;
signal alu0_mux_3_80_MUX: unsigned(7 downto 0);
signal alu0_mux_3_80_mux_2_81_mux_2_18_Y: std_logic;
signal alu0_mux_3_80_mux_2_81_mux_2_18_notSEL: std_logic;
signal alu0_mux_3_80_mux_2_81_mux_2_18_AND_1: std_logic;
signal alu0_mux_3_80_mux_2_81_mux_2_18_AND_2: std_logic;
signal alu0_mux_3_80_mux_2_81_mux_2_19_Y: std_logic;
signal alu0_mux_3_80_mux_2_81_mux_2_19_notSEL: std_logic;
signal alu0_mux_3_80_mux_2_81_mux_2_19_AND_1: std_logic;
signal alu0_mux_3_80_mux_2_81_mux_2_19_AND_2: std_logic;
signal alu0_mux_3_80_mux_2_81_mux_2_110_Y: std_logic;
signal alu0_mux_3_80_mux_2_81_mux_2_110_notSEL: std_logic;
signal alu0_mux_3_80_mux_2_81_mux_2_110_AND_1: std_logic;
signal alu0_mux_3_80_mux_2_81_mux_2_110_AND_2: std_logic;
signal alu0_mux_3_80_mux_2_81_mux_2_111_Y: std_logic;
signal alu0_mux_3_80_mux_2_81_mux_2_111_notSEL: std_logic;
signal alu0_mux_3_80_mux_2_81_mux_2_111_AND_1: std_logic;
signal alu0_mux_3_80_mux_2_81_mux_2_111_AND_2: std_logic;
signal alu0_mux_3_80_mux_2_81_mux_2_112_Y: std_logic;
signal alu0_mux_3_80_mux_2_81_mux_2_112_notSEL: std_logic;
signal alu0_mux_3_80_mux_2_81_mux_2_112_AND_1: std_logic;
signal alu0_mux_3_80_mux_2_81_mux_2_112_AND_2: std_logic;
signal alu0_mux_3_80_mux_2_81_mux_2_113_Y: std_logic;
signal alu0_mux_3_80_mux_2_81_mux_2_113_notSEL: std_logic;
signal alu0_mux_3_80_mux_2_81_mux_2_113_AND_1: std_logic;
signal alu0_mux_3_80_mux_2_81_mux_2_113_AND_2: std_logic;
signal alu0_mux_3_80_mux_2_81_mux_2_114_Y: std_logic;
signal alu0_mux_3_80_mux_2_81_mux_2_114_notSEL: std_logic;
signal alu0_mux_3_80_mux_2_81_mux_2_114_AND_1: std_logic;
signal alu0_mux_3_80_mux_2_81_mux_2_114_AND_2: std_logic;
signal alu0_mux_3_80_mux_2_81_mux_2_115_Y: std_logic;
signal alu0_mux_3_80_mux_2_81_mux_2_115_notSEL: std_logic;
signal alu0_mux_3_80_mux_2_81_mux_2_115_AND_1: std_logic;
signal alu0_mux_3_80_mux_2_81_mux_2_115_AND_2: std_logic;
signal alu0_mux_3_80_mux_2_82_mux_2_116_Y: std_logic;
signal alu0_mux_3_80_mux_2_82_mux_2_116_notSEL: std_logic;
signal alu0_mux_3_80_mux_2_82_mux_2_116_AND_1: std_logic;
signal alu0_mux_3_80_mux_2_82_mux_2_116_AND_2: std_logic;
signal alu0_mux_3_80_mux_2_82_mux_2_117_Y: std_logic;
signal alu0_mux_3_80_mux_2_82_mux_2_117_notSEL: std_logic;
signal alu0_mux_3_80_mux_2_82_mux_2_117_AND_1: std_logic;
signal alu0_mux_3_80_mux_2_82_mux_2_117_AND_2: std_logic;
signal alu0_mux_3_80_mux_2_82_mux_2_118_Y: std_logic;
signal alu0_mux_3_80_mux_2_82_mux_2_118_notSEL: std_logic;
signal alu0_mux_3_80_mux_2_82_mux_2_118_AND_1: std_logic;
signal alu0_mux_3_80_mux_2_82_mux_2_118_AND_2: std_logic;
signal alu0_mux_3_80_mux_2_82_mux_2_119_Y: std_logic;
signal alu0_mux_3_80_mux_2_82_mux_2_119_notSEL: std_logic;
signal alu0_mux_3_80_mux_2_82_mux_2_119_AND_1: std_logic;
signal alu0_mux_3_80_mux_2_82_mux_2_119_AND_2: std_logic;
signal alu0_mux_3_80_mux_2_82_mux_2_120_Y: std_logic;
signal alu0_mux_3_80_mux_2_82_mux_2_120_notSEL: std_logic;
signal alu0_mux_3_80_mux_2_82_mux_2_120_AND_1: std_logic;
signal alu0_mux_3_80_mux_2_82_mux_2_120_AND_2: std_logic;
signal alu0_mux_3_80_mux_2_82_mux_2_121_Y: std_logic;
signal alu0_mux_3_80_mux_2_82_mux_2_121_notSEL: std_logic;
signal alu0_mux_3_80_mux_2_82_mux_2_121_AND_1: std_logic;
signal alu0_mux_3_80_mux_2_82_mux_2_121_AND_2: std_logic;
signal alu0_mux_3_80_mux_2_82_mux_2_122_Y: std_logic;
signal alu0_mux_3_80_mux_2_82_mux_2_122_notSEL: std_logic;
signal alu0_mux_3_80_mux_2_82_mux_2_122_AND_1: std_logic;
signal alu0_mux_3_80_mux_2_82_mux_2_122_AND_2: std_logic;
signal alu0_mux_3_80_mux_2_82_mux_2_123_Y: std_logic;
signal alu0_mux_3_80_mux_2_82_mux_2_123_notSEL: std_logic;
signal alu0_mux_3_80_mux_2_82_mux_2_123_AND_1: std_logic;
signal alu0_mux_3_80_mux_2_82_mux_2_123_AND_2: std_logic;
signal mux_2_83_mux_2_124_Y: std_logic;
signal mux_2_83_mux_2_124_notSEL: std_logic;
signal mux_2_83_mux_2_124_AND_1: std_logic;
signal mux_2_83_mux_2_124_AND_2: std_logic;
signal mux_2_83_mux_2_125_Y: std_logic;
signal mux_2_83_mux_2_125_notSEL: std_logic;
signal mux_2_83_mux_2_125_AND_1: std_logic;
signal mux_2_83_mux_2_125_AND_2: std_logic;
signal mux_2_83_mux_2_126_Y: std_logic;
signal mux_2_83_mux_2_126_notSEL: std_logic;
signal mux_2_83_mux_2_126_AND_1: std_logic;
signal mux_2_83_mux_2_126_AND_2: std_logic;
signal mux_2_83_mux_2_127_Y: std_logic;
signal mux_2_83_mux_2_127_notSEL: std_logic;
signal mux_2_83_mux_2_127_AND_1: std_logic;
signal mux_2_83_mux_2_127_AND_2: std_logic;
signal mux_2_83_mux_2_128_Y: std_logic;
signal mux_2_83_mux_2_128_notSEL: std_logic;
signal mux_2_83_mux_2_128_AND_1: std_logic;
signal mux_2_83_mux_2_128_AND_2: std_logic;
signal mux_2_83_mux_2_129_Y: std_logic;
signal mux_2_83_mux_2_129_notSEL: std_logic;
signal mux_2_83_mux_2_129_AND_1: std_logic;
signal mux_2_83_mux_2_129_AND_2: std_logic;
signal mux_2_83_mux_2_130_Y: std_logic;
signal mux_2_83_mux_2_130_notSEL: std_logic;
signal mux_2_83_mux_2_130_AND_1: std_logic;
signal mux_2_83_mux_2_130_AND_2: std_logic;
signal mux_2_83_mux_2_131_Y: std_logic;
signal mux_2_83_mux_2_131_notSEL: std_logic;
signal mux_2_83_mux_2_131_AND_1: std_logic;
signal mux_2_83_mux_2_131_AND_2: std_logic;
signal mux_2_84_mux_2_132_Y: std_logic;
signal mux_2_84_mux_2_132_notSEL: std_logic;
signal mux_2_84_mux_2_132_AND_1: std_logic;
signal mux_2_84_mux_2_132_AND_2: std_logic;
signal mux_2_84_mux_2_133_Y: std_logic;
signal mux_2_84_mux_2_133_notSEL: std_logic;
signal mux_2_84_mux_2_133_AND_1: std_logic;
signal mux_2_84_mux_2_133_AND_2: std_logic;
signal mux_2_84_mux_2_134_Y: std_logic;
signal mux_2_84_mux_2_134_notSEL: std_logic;
signal mux_2_84_mux_2_134_AND_1: std_logic;
signal mux_2_84_mux_2_134_AND_2: std_logic;
signal mux_2_84_mux_2_135_Y: std_logic;
signal mux_2_84_mux_2_135_notSEL: std_logic;
signal mux_2_84_mux_2_135_AND_1: std_logic;
signal mux_2_84_mux_2_135_AND_2: std_logic;
signal mux_2_84_mux_2_136_Y: std_logic;
signal mux_2_84_mux_2_136_notSEL: std_logic;
signal mux_2_84_mux_2_136_AND_1: std_logic;
signal mux_2_84_mux_2_136_AND_2: std_logic;
signal mux_2_84_mux_2_137_Y: std_logic;
signal mux_2_84_mux_2_137_notSEL: std_logic;
signal mux_2_84_mux_2_137_AND_1: std_logic;
signal mux_2_84_mux_2_137_AND_2: std_logic;
signal mux_2_84_mux_2_138_Y: std_logic;
signal mux_2_84_mux_2_138_notSEL: std_logic;
signal mux_2_84_mux_2_138_AND_1: std_logic;
signal mux_2_84_mux_2_138_AND_2: std_logic;
signal mux_2_84_mux_2_139_Y: std_logic;
signal mux_2_84_mux_2_139_notSEL: std_logic;
signal mux_2_84_mux_2_139_AND_1: std_logic;
signal mux_2_84_mux_2_139_AND_2: std_logic;
signal control_logic0_Q: unsigned(2 downto 0);
signal control_logic0_Y: unsigned(15 downto 0);
signal control_logic0_notZ: std_logic;
signal control_logic0_notPC_LD: std_logic;
signal control_logic0_OR_1: std_logic;
signal control_logic0_OR_2: std_logic;
signal control_logic0_OR_3: std_logic;
signal control_logic0_OR_5: std_logic;
signal control_logic0_AND_2: std_logic;
signal control_logic0_AND_3: std_logic;
signal control_logic0_AND_7: std_logic;
signal control_logic0_AND_8: std_logic;
signal control_logic0_SUB: std_logic;
signal control_logic0_decoder_1hot_4_160_notIN_1: std_logic;
signal control_logic0_decoder_1hot_4_160_notIN_2: std_logic;
signal control_logic0_decoder_1hot_4_160_notIN_3: std_logic;
signal control_logic0_decoder_1hot_4_160_notIN_4: std_logic;
signal control_logic0_decoder_1hot_4_160_and_4_10_Y: std_logic;
signal control_logic0_decoder_1hot_4_160_and_4_11_Y: std_logic;
signal control_logic0_decoder_1hot_4_160_and_4_12_Y: std_logic;
signal control_logic0_decoder_1hot_4_160_and_4_13_Y: std_logic;
signal control_logic0_decoder_1hot_4_160_and_4_14_Y: std_logic;
signal control_logic0_decoder_1hot_4_160_and_4_15_Y: std_logic;
signal control_logic0_decoder_1hot_4_160_and_4_16_Y: std_logic;
signal control_logic0_decoder_1hot_4_160_and_4_17_Y: std_logic;
signal control_logic0_decoder_1hot_4_160_and_4_18_Y: std_logic;
signal control_logic0_decoder_1hot_4_160_and_4_19_Y: std_logic;
signal control_logic0_decoder_1hot_4_160_and_4_110_Y: std_logic;
signal control_logic0_decoder_1hot_4_160_and_4_111_Y: std_logic;
signal control_logic0_decoder_1hot_4_160_and_4_112_Y: std_logic;
signal control_logic0_decoder_1hot_4_160_and_4_113_Y: std_logic;
signal control_logic0_decoder_1hot_4_160_and_4_114_Y: std_logic;
signal control_logic0_decoder_1hot_4_160_and_4_115_Y: std_logic;
signal control_logic0_or_2_160_OUT: std_logic;
signal control_logic0_buf_1_12_OUT: std_logic;
signal control_logic0_or_2_161_OUT: std_logic;
signal buf_1_41_A: unsigned(3 downto 0);

begin


counter_80_zero <= to_unsigned(0, 8);
buf_1_41_A <= to_unsigned(0, 4);


register_160_fdce0_logic: process (CLK, CLR) is
begin
    if (CLR = '1') then
        register_160_fdce0_Q <= '0';
    elsif rising_edge(CLK) then
        if (IR_EN = '1') then
            register_160_fdce0_Q <= DATA_IN(0);
        else
            register_160_fdce0_Q <= register_160_fdce0_Q;
        end if;
    end if;
end process register_160_fdce0_logic;

register_160_fdce1_logic: process (CLK, CLR) is
begin
    if (CLR = '1') then
        register_160_fdce1_Q <= '0';
    elsif rising_edge(CLK) then
        if (IR_EN = '1') then
            register_160_fdce1_Q <= DATA_IN(1);
        else
            register_160_fdce1_Q <= register_160_fdce1_Q;
        end if;
    end if;
end process register_160_fdce1_logic;

register_160_fdce2_logic: process (CLK, CLR) is
begin
    if (CLR = '1') then
        register_160_fdce2_Q <= '0';
    elsif rising_edge(CLK) then
        if (IR_EN = '1') then
            register_160_fdce2_Q <= DATA_IN(2);
        else
            register_160_fdce2_Q <= register_160_fdce2_Q;
        end if;
    end if;
end process register_160_fdce2_logic;

register_160_fdce3_logic: process (CLK, CLR) is
begin
    if (CLR = '1') then
        register_160_fdce3_Q <= '0';
    elsif rising_edge(CLK) then
        if (IR_EN = '1') then
            register_160_fdce3_Q <= DATA_IN(3);
        else
            register_160_fdce3_Q <= register_160_fdce3_Q;
        end if;
    end if;
end process register_160_fdce3_logic;

register_160_fdce4_logic: process (CLK, CLR) is
begin
    if (CLR = '1') then
        register_160_fdce4_Q <= '0';
    elsif rising_edge(CLK) then
        if (IR_EN = '1') then
            register_160_fdce4_Q <= DATA_IN(4);
        else
            register_160_fdce4_Q <= register_160_fdce4_Q;
        end if;
    end if;
end process register_160_fdce4_logic;

register_160_fdce5_logic: process (CLK, CLR) is
begin
    if (CLR = '1') then
        register_160_fdce5_Q <= '0';
    elsif rising_edge(CLK) then
        if (IR_EN = '1') then
            register_160_fdce5_Q <= DATA_IN(5);
        else
            register_160_fdce5_Q <= register_160_fdce5_Q;
        end if;
    end if;
end process register_160_fdce5_logic;

register_160_fdce6_logic: process (CLK, CLR) is
begin
    if (CLR = '1') then
        register_160_fdce6_Q <= '0';
    elsif rising_edge(CLK) then
        if (IR_EN = '1') then
            register_160_fdce6_Q <= DATA_IN(6);
        else
            register_160_fdce6_Q <= register_160_fdce6_Q;
        end if;
    end if;
end process register_160_fdce6_logic;

register_160_fdce7_logic: process (CLK, CLR) is
begin
    if (CLR = '1') then
        register_160_fdce7_Q <= '0';
    elsif rising_edge(CLK) then
        if (IR_EN = '1') then
            register_160_fdce7_Q <= DATA_IN(7);
        else
            register_160_fdce7_Q <= register_160_fdce7_Q;
        end if;
    end if;
end process register_160_fdce7_logic;

register_160_fdce8_logic: process (CLK, CLR) is
begin
    if (CLR = '1') then
        register_160_fdce8_Q <= '0';
    elsif rising_edge(CLK) then
        if (IR_EN = '1') then
            register_160_fdce8_Q <= DATA_IN(8);
        else
            register_160_fdce8_Q <= register_160_fdce8_Q;
        end if;
    end if;
end process register_160_fdce8_logic;

register_160_fdce9_logic: process (CLK, CLR) is
begin
    if (CLR = '1') then
        register_160_fdce9_Q <= '0';
    elsif rising_edge(CLK) then
        if (IR_EN = '1') then
            register_160_fdce9_Q <= DATA_IN(9);
        else
            register_160_fdce9_Q <= register_160_fdce9_Q;
        end if;
    end if;
end process register_160_fdce9_logic;

register_160_fdce10_logic: process (CLK, CLR) is
begin
    if (CLR = '1') then
        register_160_fdce10_Q <= '0';
    elsif rising_edge(CLK) then
        if (IR_EN = '1') then
            register_160_fdce10_Q <= DATA_IN(10);
        else
            register_160_fdce10_Q <= register_160_fdce10_Q;
        end if;
    end if;
end process register_160_fdce10_logic;

register_160_fdce11_logic: process (CLK, CLR) is
begin
    if (CLR = '1') then
        register_160_fdce11_Q <= '0';
    elsif rising_edge(CLK) then
        if (IR_EN = '1') then
            register_160_fdce11_Q <= DATA_IN(11);
        else
            register_160_fdce11_Q <= register_160_fdce11_Q;
        end if;
    end if;
end process register_160_fdce11_logic;

register_160_fdce12_logic: process (CLK, CLR) is
begin
    if (CLR = '1') then
        register_160_fdce12_Q <= '0';
    elsif rising_edge(CLK) then
        if (IR_EN = '1') then
            register_160_fdce12_Q <= DATA_IN(12);
        else
            register_160_fdce12_Q <= register_160_fdce12_Q;
        end if;
    end if;
end process register_160_fdce12_logic;

register_160_fdce13_logic: process (CLK, CLR) is
begin
    if (CLR = '1') then
        register_160_fdce13_Q <= '0';
    elsif rising_edge(CLK) then
        if (IR_EN = '1') then
            register_160_fdce13_Q <= DATA_IN(13);
        else
            register_160_fdce13_Q <= register_160_fdce13_Q;
        end if;
    end if;
end process register_160_fdce13_logic;

register_160_fdce14_logic: process (CLK, CLR) is
begin
    if (CLR = '1') then
        register_160_fdce14_Q <= '0';
    elsif rising_edge(CLK) then
        if (IR_EN = '1') then
            register_160_fdce14_Q <= DATA_IN(14);
        else
            register_160_fdce14_Q <= register_160_fdce14_Q;
        end if;
    end if;
end process register_160_fdce14_logic;

register_160_fdce15_logic: process (CLK, CLR) is
begin
    if (CLR = '1') then
        register_160_fdce15_Q <= '0';
    elsif rising_edge(CLK) then
        if (IR_EN = '1') then
            register_160_fdce15_Q <= DATA_IN(15);
        else
            register_160_fdce15_Q <= register_160_fdce15_Q;
        end if;
    end if;
end process register_160_fdce15_logic;


IR <= unsigned'(register_160_fdce15_Q & register_160_fdce14_Q & register_160_fdce13_Q & register_160_fdce12_Q & register_160_fdce11_Q & register_160_fdce10_Q & register_160_fdce9_Q & register_160_fdce8_Q & register_160_fdce7_Q & register_160_fdce6_Q & register_160_fdce5_Q & register_160_fdce4_Q & register_160_fdce3_Q & register_160_fdce2_Q & register_160_fdce1_Q & register_160_fdce0_Q);

register_80_fdce16_logic: process (CLK, CLR) is
begin
    if (CLR = '1') then
        register_80_fdce16_Q <= '0';
    elsif rising_edge(CLK) then
        if (ACC_EN = '1') then
            register_80_fdce16_Q <= ALU(0);
        else
            register_80_fdce16_Q <= register_80_fdce16_Q;
        end if;
    end if;
end process register_80_fdce16_logic;

register_80_fdce17_logic: process (CLK, CLR) is
begin
    if (CLR = '1') then
        register_80_fdce17_Q <= '0';
    elsif rising_edge(CLK) then
        if (ACC_EN = '1') then
            register_80_fdce17_Q <= ALU(1);
        else
            register_80_fdce17_Q <= register_80_fdce17_Q;
        end if;
    end if;
end process register_80_fdce17_logic;

register_80_fdce18_logic: process (CLK, CLR) is
begin
    if (CLR = '1') then
        register_80_fdce18_Q <= '0';
    elsif rising_edge(CLK) then
        if (ACC_EN = '1') then
            register_80_fdce18_Q <= ALU(2);
        else
            register_80_fdce18_Q <= register_80_fdce18_Q;
        end if;
    end if;
end process register_80_fdce18_logic;

register_80_fdce19_logic: process (CLK, CLR) is
begin
    if (CLR = '1') then
        register_80_fdce19_Q <= '0';
    elsif rising_edge(CLK) then
        if (ACC_EN = '1') then
            register_80_fdce19_Q <= ALU(3);
        else
            register_80_fdce19_Q <= register_80_fdce19_Q;
        end if;
    end if;
end process register_80_fdce19_logic;

register_80_fdce20_logic: process (CLK, CLR) is
begin
    if (CLR = '1') then
        register_80_fdce20_Q <= '0';
    elsif rising_edge(CLK) then
        if (ACC_EN = '1') then
            register_80_fdce20_Q <= ALU(4);
        else
            register_80_fdce20_Q <= register_80_fdce20_Q;
        end if;
    end if;
end process register_80_fdce20_logic;

register_80_fdce21_logic: process (CLK, CLR) is
begin
    if (CLR = '1') then
        register_80_fdce21_Q <= '0';
    elsif rising_edge(CLK) then
        if (ACC_EN = '1') then
            register_80_fdce21_Q <= ALU(5);
        else
            register_80_fdce21_Q <= register_80_fdce21_Q;
        end if;
    end if;
end process register_80_fdce21_logic;

register_80_fdce22_logic: process (CLK, CLR) is
begin
    if (CLR = '1') then
        register_80_fdce22_Q <= '0';
    elsif rising_edge(CLK) then
        if (ACC_EN = '1') then
            register_80_fdce22_Q <= ALU(6);
        else
            register_80_fdce22_Q <= register_80_fdce22_Q;
        end if;
    end if;
end process register_80_fdce22_logic;

register_80_fdce23_logic: process (CLK, CLR) is
begin
    if (CLR = '1') then
        register_80_fdce23_Q <= '0';
    elsif rising_edge(CLK) then
        if (ACC_EN = '1') then
            register_80_fdce23_Q <= ALU(7);
        else
            register_80_fdce23_Q <= register_80_fdce23_Q;
        end if;
    end if;
end process register_80_fdce23_logic;


ACC <= unsigned'(register_80_fdce23_Q & register_80_fdce22_Q & register_80_fdce21_Q & register_80_fdce20_Q & register_80_fdce19_Q & register_80_fdce18_Q & register_80_fdce17_Q & register_80_fdce16_Q);


counter_80_mux_2_80_mux_2_10_notSEL <= ((not PC_LD) and '1');


counter_80_mux_2_80_mux_2_10_AND_1 <= (PC(0) and counter_80_mux_2_80_mux_2_10_notSEL);


counter_80_mux_2_80_mux_2_10_AND_2 <= (PC_LD and IR(0));


counter_80_mux_2_80_mux_2_10_Y <= (counter_80_mux_2_80_mux_2_10_AND_1 or counter_80_mux_2_80_mux_2_10_AND_2);


counter_80_mux_2_80_mux_2_11_notSEL <= ((not PC_LD) and '1');


counter_80_mux_2_80_mux_2_11_AND_1 <= (PC(1) and counter_80_mux_2_80_mux_2_11_notSEL);


counter_80_mux_2_80_mux_2_11_AND_2 <= (PC_LD and IR(1));


counter_80_mux_2_80_mux_2_11_Y <= (counter_80_mux_2_80_mux_2_11_AND_1 or counter_80_mux_2_80_mux_2_11_AND_2);


counter_80_mux_2_80_mux_2_12_notSEL <= ((not PC_LD) and '1');


counter_80_mux_2_80_mux_2_12_AND_1 <= (PC(2) and counter_80_mux_2_80_mux_2_12_notSEL);


counter_80_mux_2_80_mux_2_12_AND_2 <= (PC_LD and IR(2));


counter_80_mux_2_80_mux_2_12_Y <= (counter_80_mux_2_80_mux_2_12_AND_1 or counter_80_mux_2_80_mux_2_12_AND_2);


counter_80_mux_2_80_mux_2_13_notSEL <= ((not PC_LD) and '1');


counter_80_mux_2_80_mux_2_13_AND_1 <= (PC(3) and counter_80_mux_2_80_mux_2_13_notSEL);


counter_80_mux_2_80_mux_2_13_AND_2 <= (PC_LD and IR(3));


counter_80_mux_2_80_mux_2_13_Y <= (counter_80_mux_2_80_mux_2_13_AND_1 or counter_80_mux_2_80_mux_2_13_AND_2);


counter_80_mux_2_80_mux_2_14_notSEL <= ((not PC_LD) and '1');


counter_80_mux_2_80_mux_2_14_AND_1 <= (PC(4) and counter_80_mux_2_80_mux_2_14_notSEL);


counter_80_mux_2_80_mux_2_14_AND_2 <= (PC_LD and IR(4));


counter_80_mux_2_80_mux_2_14_Y <= (counter_80_mux_2_80_mux_2_14_AND_1 or counter_80_mux_2_80_mux_2_14_AND_2);


counter_80_mux_2_80_mux_2_15_notSEL <= ((not PC_LD) and '1');


counter_80_mux_2_80_mux_2_15_AND_1 <= (PC(5) and counter_80_mux_2_80_mux_2_15_notSEL);


counter_80_mux_2_80_mux_2_15_AND_2 <= (PC_LD and IR(5));


counter_80_mux_2_80_mux_2_15_Y <= (counter_80_mux_2_80_mux_2_15_AND_1 or counter_80_mux_2_80_mux_2_15_AND_2);


counter_80_mux_2_80_mux_2_16_notSEL <= ((not PC_LD) and '1');


counter_80_mux_2_80_mux_2_16_AND_1 <= (PC(6) and counter_80_mux_2_80_mux_2_16_notSEL);


counter_80_mux_2_80_mux_2_16_AND_2 <= (PC_LD and IR(6));


counter_80_mux_2_80_mux_2_16_Y <= (counter_80_mux_2_80_mux_2_16_AND_1 or counter_80_mux_2_80_mux_2_16_AND_2);


counter_80_mux_2_80_mux_2_17_notSEL <= ((not PC_LD) and '1');


counter_80_mux_2_80_mux_2_17_AND_1 <= (PC(7) and counter_80_mux_2_80_mux_2_17_notSEL);


counter_80_mux_2_80_mux_2_17_AND_2 <= (PC_LD and IR(7));


counter_80_mux_2_80_mux_2_17_Y <= (counter_80_mux_2_80_mux_2_17_AND_1 or counter_80_mux_2_80_mux_2_17_AND_2);


counter_80_MUX <= unsigned'(counter_80_mux_2_80_mux_2_17_Y & counter_80_mux_2_80_mux_2_16_Y & counter_80_mux_2_80_mux_2_15_Y & counter_80_mux_2_80_mux_2_14_Y & counter_80_mux_2_80_mux_2_13_Y & counter_80_mux_2_80_mux_2_12_Y & counter_80_mux_2_80_mux_2_11_Y & counter_80_mux_2_80_mux_2_10_Y);


counter_80_notLD <= ((not PC_LD) and '1');


counter_80_add_80_full_adder0_SUM_1 <= (counter_80_MUX(0) xor counter_80_zero(0));


counter_80_add_80_full_adder0_COUT_1 <= (counter_80_MUX(0) and counter_80_zero(0));


counter_80_add_80_full_adder0_SUM <= (counter_80_notLD xor counter_80_add_80_full_adder0_SUM_1);


counter_80_add_80_full_adder0_COUT_2 <= (counter_80_notLD and counter_80_add_80_full_adder0_SUM_1);


counter_80_add_80_full_adder0_COUT <= (counter_80_add_80_full_adder0_COUT_1 or counter_80_add_80_full_adder0_COUT_2);


counter_80_add_80_full_adder1_SUM_1 <= (counter_80_MUX(1) xor counter_80_zero(1));


counter_80_add_80_full_adder1_COUT_1 <= (counter_80_MUX(1) and counter_80_zero(1));


counter_80_add_80_full_adder1_SUM <= (counter_80_add_80_full_adder0_COUT xor counter_80_add_80_full_adder1_SUM_1);


counter_80_add_80_full_adder1_COUT_2 <= (counter_80_add_80_full_adder0_COUT and counter_80_add_80_full_adder1_SUM_1);


counter_80_add_80_full_adder1_COUT <= (counter_80_add_80_full_adder1_COUT_1 or counter_80_add_80_full_adder1_COUT_2);


counter_80_add_80_full_adder2_SUM_1 <= (counter_80_MUX(2) xor counter_80_zero(2));


counter_80_add_80_full_adder2_COUT_1 <= (counter_80_MUX(2) and counter_80_zero(2));


counter_80_add_80_full_adder2_SUM <= (counter_80_add_80_full_adder1_COUT xor counter_80_add_80_full_adder2_SUM_1);


counter_80_add_80_full_adder2_COUT_2 <= (counter_80_add_80_full_adder1_COUT and counter_80_add_80_full_adder2_SUM_1);


counter_80_add_80_full_adder2_COUT <= (counter_80_add_80_full_adder2_COUT_1 or counter_80_add_80_full_adder2_COUT_2);


counter_80_add_80_full_adder3_SUM_1 <= (counter_80_MUX(3) xor counter_80_zero(3));


counter_80_add_80_full_adder3_COUT_1 <= (counter_80_MUX(3) and counter_80_zero(3));


counter_80_add_80_full_adder3_SUM <= (counter_80_add_80_full_adder2_COUT xor counter_80_add_80_full_adder3_SUM_1);


counter_80_add_80_full_adder3_COUT_2 <= (counter_80_add_80_full_adder2_COUT and counter_80_add_80_full_adder3_SUM_1);


counter_80_add_80_full_adder3_COUT <= (counter_80_add_80_full_adder3_COUT_1 or counter_80_add_80_full_adder3_COUT_2);


counter_80_add_80_full_adder4_SUM_1 <= (counter_80_MUX(4) xor counter_80_zero(4));


counter_80_add_80_full_adder4_COUT_1 <= (counter_80_MUX(4) and counter_80_zero(4));


counter_80_add_80_full_adder4_SUM <= (counter_80_add_80_full_adder3_COUT xor counter_80_add_80_full_adder4_SUM_1);


counter_80_add_80_full_adder4_COUT_2 <= (counter_80_add_80_full_adder3_COUT and counter_80_add_80_full_adder4_SUM_1);


counter_80_add_80_full_adder4_COUT <= (counter_80_add_80_full_adder4_COUT_1 or counter_80_add_80_full_adder4_COUT_2);


counter_80_add_80_full_adder5_SUM_1 <= (counter_80_MUX(5) xor counter_80_zero(5));


counter_80_add_80_full_adder5_COUT_1 <= (counter_80_MUX(5) and counter_80_zero(5));


counter_80_add_80_full_adder5_SUM <= (counter_80_add_80_full_adder4_COUT xor counter_80_add_80_full_adder5_SUM_1);


counter_80_add_80_full_adder5_COUT_2 <= (counter_80_add_80_full_adder4_COUT and counter_80_add_80_full_adder5_SUM_1);


counter_80_add_80_full_adder5_COUT <= (counter_80_add_80_full_adder5_COUT_1 or counter_80_add_80_full_adder5_COUT_2);


counter_80_add_80_full_adder6_SUM_1 <= (counter_80_MUX(6) xor counter_80_zero(6));


counter_80_add_80_full_adder6_COUT_1 <= (counter_80_MUX(6) and counter_80_zero(6));


counter_80_add_80_full_adder6_SUM <= (counter_80_add_80_full_adder5_COUT xor counter_80_add_80_full_adder6_SUM_1);


counter_80_add_80_full_adder6_COUT_2 <= (counter_80_add_80_full_adder5_COUT and counter_80_add_80_full_adder6_SUM_1);


counter_80_add_80_full_adder6_COUT <= (counter_80_add_80_full_adder6_COUT_1 or counter_80_add_80_full_adder6_COUT_2);


counter_80_add_80_full_adder7_SUM_1 <= (counter_80_MUX(7) xor counter_80_zero(7));


counter_80_add_80_full_adder7_COUT_1 <= (counter_80_MUX(7) and counter_80_zero(7));


counter_80_add_80_full_adder7_SUM <= (counter_80_add_80_full_adder6_COUT xor counter_80_add_80_full_adder7_SUM_1);


counter_80_add_80_full_adder7_COUT_2 <= (counter_80_add_80_full_adder6_COUT and counter_80_add_80_full_adder7_SUM_1);


counter_80_COUT <= (counter_80_add_80_full_adder7_COUT_1 or counter_80_add_80_full_adder7_COUT_2);


counter_80_SUM <= unsigned'(counter_80_add_80_full_adder7_SUM & counter_80_add_80_full_adder6_SUM & counter_80_add_80_full_adder5_SUM & counter_80_add_80_full_adder4_SUM & counter_80_add_80_full_adder3_SUM & counter_80_add_80_full_adder2_SUM & counter_80_add_80_full_adder1_SUM & counter_80_add_80_full_adder0_SUM);

counter_80_register_81_fdce24_logic: process (CLK, CLR) is
begin
    if (CLR = '1') then
        counter_80_register_81_fdce24_Q <= '0';
    elsif rising_edge(CLK) then
        if (PC_EN = '1') then
            counter_80_register_81_fdce24_Q <= counter_80_SUM(0);
        else
            counter_80_register_81_fdce24_Q <= counter_80_register_81_fdce24_Q;
        end if;
    end if;
end process counter_80_register_81_fdce24_logic;

counter_80_register_81_fdce25_logic: process (CLK, CLR) is
begin
    if (CLR = '1') then
        counter_80_register_81_fdce25_Q <= '0';
    elsif rising_edge(CLK) then
        if (PC_EN = '1') then
            counter_80_register_81_fdce25_Q <= counter_80_SUM(1);
        else
            counter_80_register_81_fdce25_Q <= counter_80_register_81_fdce25_Q;
        end if;
    end if;
end process counter_80_register_81_fdce25_logic;

counter_80_register_81_fdce26_logic: process (CLK, CLR) is
begin
    if (CLR = '1') then
        counter_80_register_81_fdce26_Q <= '0';
    elsif rising_edge(CLK) then
        if (PC_EN = '1') then
            counter_80_register_81_fdce26_Q <= counter_80_SUM(2);
        else
            counter_80_register_81_fdce26_Q <= counter_80_register_81_fdce26_Q;
        end if;
    end if;
end process counter_80_register_81_fdce26_logic;

counter_80_register_81_fdce27_logic: process (CLK, CLR) is
begin
    if (CLR = '1') then
        counter_80_register_81_fdce27_Q <= '0';
    elsif rising_edge(CLK) then
        if (PC_EN = '1') then
            counter_80_register_81_fdce27_Q <= counter_80_SUM(3);
        else
            counter_80_register_81_fdce27_Q <= counter_80_register_81_fdce27_Q;
        end if;
    end if;
end process counter_80_register_81_fdce27_logic;

counter_80_register_81_fdce28_logic: process (CLK, CLR) is
begin
    if (CLR = '1') then
        counter_80_register_81_fdce28_Q <= '0';
    elsif rising_edge(CLK) then
        if (PC_EN = '1') then
            counter_80_register_81_fdce28_Q <= counter_80_SUM(4);
        else
            counter_80_register_81_fdce28_Q <= counter_80_register_81_fdce28_Q;
        end if;
    end if;
end process counter_80_register_81_fdce28_logic;

counter_80_register_81_fdce29_logic: process (CLK, CLR) is
begin
    if (CLR = '1') then
        counter_80_register_81_fdce29_Q <= '0';
    elsif rising_edge(CLK) then
        if (PC_EN = '1') then
            counter_80_register_81_fdce29_Q <= counter_80_SUM(5);
        else
            counter_80_register_81_fdce29_Q <= counter_80_register_81_fdce29_Q;
        end if;
    end if;
end process counter_80_register_81_fdce29_logic;

counter_80_register_81_fdce30_logic: process (CLK, CLR) is
begin
    if (CLR = '1') then
        counter_80_register_81_fdce30_Q <= '0';
    elsif rising_edge(CLK) then
        if (PC_EN = '1') then
            counter_80_register_81_fdce30_Q <= counter_80_SUM(6);
        else
            counter_80_register_81_fdce30_Q <= counter_80_register_81_fdce30_Q;
        end if;
    end if;
end process counter_80_register_81_fdce30_logic;

counter_80_register_81_fdce31_logic: process (CLK, CLR) is
begin
    if (CLR = '1') then
        counter_80_register_81_fdce31_Q <= '0';
    elsif rising_edge(CLK) then
        if (PC_EN = '1') then
            counter_80_register_81_fdce31_Q <= counter_80_SUM(7);
        else
            counter_80_register_81_fdce31_Q <= counter_80_register_81_fdce31_Q;
        end if;
    end if;
end process counter_80_register_81_fdce31_logic;


PC <= unsigned'(counter_80_register_81_fdce31_Q & counter_80_register_81_fdce30_Q & counter_80_register_81_fdce29_Q & counter_80_register_81_fdce28_Q & counter_80_register_81_fdce27_Q & counter_80_register_81_fdce26_Q & counter_80_register_81_fdce25_Q & counter_80_register_81_fdce24_Q);


alu0_add_sub_80_XOR_OUT <= (DATA xor alu0_add_sub_80_CTL_BUS);


alu0_add_sub_80_add_81_full_adder8_SUM_1 <= (ACC(0) xor alu0_add_sub_80_XOR_OUT(0));


alu0_add_sub_80_add_81_full_adder8_COUT_1 <= (ACC(0) and alu0_add_sub_80_XOR_OUT(0));


alu0_add_sub_80_add_81_full_adder8_SUM <= (ACC_CTL(0) xor alu0_add_sub_80_add_81_full_adder8_SUM_1);


alu0_add_sub_80_add_81_full_adder8_COUT_2 <= (ACC_CTL(0) and alu0_add_sub_80_add_81_full_adder8_SUM_1);


alu0_add_sub_80_add_81_full_adder8_COUT <= (alu0_add_sub_80_add_81_full_adder8_COUT_1 or alu0_add_sub_80_add_81_full_adder8_COUT_2);


alu0_add_sub_80_add_81_full_adder9_SUM_1 <= (ACC(1) xor alu0_add_sub_80_XOR_OUT(1));


alu0_add_sub_80_add_81_full_adder9_COUT_1 <= (ACC(1) and alu0_add_sub_80_XOR_OUT(1));


alu0_add_sub_80_add_81_full_adder9_SUM <= (alu0_add_sub_80_add_81_full_adder8_COUT xor alu0_add_sub_80_add_81_full_adder9_SUM_1);


alu0_add_sub_80_add_81_full_adder9_COUT_2 <= (alu0_add_sub_80_add_81_full_adder8_COUT and alu0_add_sub_80_add_81_full_adder9_SUM_1);


alu0_add_sub_80_add_81_full_adder9_COUT <= (alu0_add_sub_80_add_81_full_adder9_COUT_1 or alu0_add_sub_80_add_81_full_adder9_COUT_2);


alu0_add_sub_80_add_81_full_adder10_SUM_1 <= (ACC(2) xor alu0_add_sub_80_XOR_OUT(2));


alu0_add_sub_80_add_81_full_adder10_COUT_1 <= (ACC(2) and alu0_add_sub_80_XOR_OUT(2));


alu0_add_sub_80_add_81_full_adder10_SUM <= (alu0_add_sub_80_add_81_full_adder9_COUT xor alu0_add_sub_80_add_81_full_adder10_SUM_1);


alu0_add_sub_80_add_81_full_adder10_COUT_2 <= (alu0_add_sub_80_add_81_full_adder9_COUT and alu0_add_sub_80_add_81_full_adder10_SUM_1);


alu0_add_sub_80_add_81_full_adder10_COUT <= (alu0_add_sub_80_add_81_full_adder10_COUT_1 or alu0_add_sub_80_add_81_full_adder10_COUT_2);


alu0_add_sub_80_add_81_full_adder11_SUM_1 <= (ACC(3) xor alu0_add_sub_80_XOR_OUT(3));


alu0_add_sub_80_add_81_full_adder11_COUT_1 <= (ACC(3) and alu0_add_sub_80_XOR_OUT(3));


alu0_add_sub_80_add_81_full_adder11_SUM <= (alu0_add_sub_80_add_81_full_adder10_COUT xor alu0_add_sub_80_add_81_full_adder11_SUM_1);


alu0_add_sub_80_add_81_full_adder11_COUT_2 <= (alu0_add_sub_80_add_81_full_adder10_COUT and alu0_add_sub_80_add_81_full_adder11_SUM_1);


alu0_add_sub_80_add_81_full_adder11_COUT <= (alu0_add_sub_80_add_81_full_adder11_COUT_1 or alu0_add_sub_80_add_81_full_adder11_COUT_2);


alu0_add_sub_80_add_81_full_adder12_SUM_1 <= (ACC(4) xor alu0_add_sub_80_XOR_OUT(4));


alu0_add_sub_80_add_81_full_adder12_COUT_1 <= (ACC(4) and alu0_add_sub_80_XOR_OUT(4));


alu0_add_sub_80_add_81_full_adder12_SUM <= (alu0_add_sub_80_add_81_full_adder11_COUT xor alu0_add_sub_80_add_81_full_adder12_SUM_1);


alu0_add_sub_80_add_81_full_adder12_COUT_2 <= (alu0_add_sub_80_add_81_full_adder11_COUT and alu0_add_sub_80_add_81_full_adder12_SUM_1);


alu0_add_sub_80_add_81_full_adder12_COUT <= (alu0_add_sub_80_add_81_full_adder12_COUT_1 or alu0_add_sub_80_add_81_full_adder12_COUT_2);


alu0_add_sub_80_add_81_full_adder13_SUM_1 <= (ACC(5) xor alu0_add_sub_80_XOR_OUT(5));


alu0_add_sub_80_add_81_full_adder13_COUT_1 <= (ACC(5) and alu0_add_sub_80_XOR_OUT(5));


alu0_add_sub_80_add_81_full_adder13_SUM <= (alu0_add_sub_80_add_81_full_adder12_COUT xor alu0_add_sub_80_add_81_full_adder13_SUM_1);


alu0_add_sub_80_add_81_full_adder13_COUT_2 <= (alu0_add_sub_80_add_81_full_adder12_COUT and alu0_add_sub_80_add_81_full_adder13_SUM_1);


alu0_add_sub_80_add_81_full_adder13_COUT <= (alu0_add_sub_80_add_81_full_adder13_COUT_1 or alu0_add_sub_80_add_81_full_adder13_COUT_2);


alu0_add_sub_80_add_81_full_adder14_SUM_1 <= (ACC(6) xor alu0_add_sub_80_XOR_OUT(6));


alu0_add_sub_80_add_81_full_adder14_COUT_1 <= (ACC(6) and alu0_add_sub_80_XOR_OUT(6));


alu0_add_sub_80_add_81_full_adder14_SUM <= (alu0_add_sub_80_add_81_full_adder13_COUT xor alu0_add_sub_80_add_81_full_adder14_SUM_1);


alu0_add_sub_80_add_81_full_adder14_COUT_2 <= (alu0_add_sub_80_add_81_full_adder13_COUT and alu0_add_sub_80_add_81_full_adder14_SUM_1);


alu0_add_sub_80_add_81_full_adder14_COUT <= (alu0_add_sub_80_add_81_full_adder14_COUT_1 or alu0_add_sub_80_add_81_full_adder14_COUT_2);


alu0_add_sub_80_add_81_full_adder15_SUM_1 <= (ACC(7) xor alu0_add_sub_80_XOR_OUT(7));


alu0_add_sub_80_add_81_full_adder15_COUT_1 <= (ACC(7) and alu0_add_sub_80_XOR_OUT(7));


alu0_add_sub_80_add_81_full_adder15_SUM <= (alu0_add_sub_80_add_81_full_adder14_COUT xor alu0_add_sub_80_add_81_full_adder15_SUM_1);


alu0_add_sub_80_add_81_full_adder15_COUT_2 <= (alu0_add_sub_80_add_81_full_adder14_COUT and alu0_add_sub_80_add_81_full_adder15_SUM_1);


alu0_add_sub_80_COUT <= (alu0_add_sub_80_add_81_full_adder15_COUT_1 or alu0_add_sub_80_add_81_full_adder15_COUT_2);


alu0_ADD_SUB <= unsigned'(alu0_add_sub_80_add_81_full_adder15_SUM & alu0_add_sub_80_add_81_full_adder14_SUM & alu0_add_sub_80_add_81_full_adder13_SUM & alu0_add_sub_80_add_81_full_adder12_SUM & alu0_add_sub_80_add_81_full_adder11_SUM & alu0_add_sub_80_add_81_full_adder10_SUM & alu0_add_sub_80_add_81_full_adder9_SUM & alu0_add_sub_80_add_81_full_adder8_SUM);


alu0_add_sub_80_CTL_BUS <= unsigned'(ACC_CTL(0) & ACC_CTL(0) & ACC_CTL(0) & ACC_CTL(0) & ACC_CTL(0) & ACC_CTL(0) & ACC_CTL(0) & ACC_CTL(0));


alu0_AND <= (ACC and DATA);


alu0_mux_3_80_mux_2_81_mux_2_18_notSEL <= ((not ACC_CTL(1)) and '1');


alu0_mux_3_80_mux_2_81_mux_2_18_AND_1 <= (alu0_ADD_SUB(0) and alu0_mux_3_80_mux_2_81_mux_2_18_notSEL);


alu0_mux_3_80_mux_2_81_mux_2_18_AND_2 <= (ACC_CTL(1) and alu0_AND(0));


alu0_mux_3_80_mux_2_81_mux_2_18_Y <= (alu0_mux_3_80_mux_2_81_mux_2_18_AND_1 or alu0_mux_3_80_mux_2_81_mux_2_18_AND_2);


alu0_mux_3_80_mux_2_81_mux_2_19_notSEL <= ((not ACC_CTL(1)) and '1');


alu0_mux_3_80_mux_2_81_mux_2_19_AND_1 <= (alu0_ADD_SUB(1) and alu0_mux_3_80_mux_2_81_mux_2_19_notSEL);


alu0_mux_3_80_mux_2_81_mux_2_19_AND_2 <= (ACC_CTL(1) and alu0_AND(1));


alu0_mux_3_80_mux_2_81_mux_2_19_Y <= (alu0_mux_3_80_mux_2_81_mux_2_19_AND_1 or alu0_mux_3_80_mux_2_81_mux_2_19_AND_2);


alu0_mux_3_80_mux_2_81_mux_2_110_notSEL <= ((not ACC_CTL(1)) and '1');


alu0_mux_3_80_mux_2_81_mux_2_110_AND_1 <= (alu0_ADD_SUB(2) and alu0_mux_3_80_mux_2_81_mux_2_110_notSEL);


alu0_mux_3_80_mux_2_81_mux_2_110_AND_2 <= (ACC_CTL(1) and alu0_AND(2));


alu0_mux_3_80_mux_2_81_mux_2_110_Y <= (alu0_mux_3_80_mux_2_81_mux_2_110_AND_1 or alu0_mux_3_80_mux_2_81_mux_2_110_AND_2);


alu0_mux_3_80_mux_2_81_mux_2_111_notSEL <= ((not ACC_CTL(1)) and '1');


alu0_mux_3_80_mux_2_81_mux_2_111_AND_1 <= (alu0_ADD_SUB(3) and alu0_mux_3_80_mux_2_81_mux_2_111_notSEL);


alu0_mux_3_80_mux_2_81_mux_2_111_AND_2 <= (ACC_CTL(1) and alu0_AND(3));


alu0_mux_3_80_mux_2_81_mux_2_111_Y <= (alu0_mux_3_80_mux_2_81_mux_2_111_AND_1 or alu0_mux_3_80_mux_2_81_mux_2_111_AND_2);


alu0_mux_3_80_mux_2_81_mux_2_112_notSEL <= ((not ACC_CTL(1)) and '1');


alu0_mux_3_80_mux_2_81_mux_2_112_AND_1 <= (alu0_ADD_SUB(4) and alu0_mux_3_80_mux_2_81_mux_2_112_notSEL);


alu0_mux_3_80_mux_2_81_mux_2_112_AND_2 <= (ACC_CTL(1) and alu0_AND(4));


alu0_mux_3_80_mux_2_81_mux_2_112_Y <= (alu0_mux_3_80_mux_2_81_mux_2_112_AND_1 or alu0_mux_3_80_mux_2_81_mux_2_112_AND_2);


alu0_mux_3_80_mux_2_81_mux_2_113_notSEL <= ((not ACC_CTL(1)) and '1');


alu0_mux_3_80_mux_2_81_mux_2_113_AND_1 <= (alu0_ADD_SUB(5) and alu0_mux_3_80_mux_2_81_mux_2_113_notSEL);


alu0_mux_3_80_mux_2_81_mux_2_113_AND_2 <= (ACC_CTL(1) and alu0_AND(5));


alu0_mux_3_80_mux_2_81_mux_2_113_Y <= (alu0_mux_3_80_mux_2_81_mux_2_113_AND_1 or alu0_mux_3_80_mux_2_81_mux_2_113_AND_2);


alu0_mux_3_80_mux_2_81_mux_2_114_notSEL <= ((not ACC_CTL(1)) and '1');


alu0_mux_3_80_mux_2_81_mux_2_114_AND_1 <= (alu0_ADD_SUB(6) and alu0_mux_3_80_mux_2_81_mux_2_114_notSEL);


alu0_mux_3_80_mux_2_81_mux_2_114_AND_2 <= (ACC_CTL(1) and alu0_AND(6));


alu0_mux_3_80_mux_2_81_mux_2_114_Y <= (alu0_mux_3_80_mux_2_81_mux_2_114_AND_1 or alu0_mux_3_80_mux_2_81_mux_2_114_AND_2);


alu0_mux_3_80_mux_2_81_mux_2_115_notSEL <= ((not ACC_CTL(1)) and '1');


alu0_mux_3_80_mux_2_81_mux_2_115_AND_1 <= (alu0_ADD_SUB(7) and alu0_mux_3_80_mux_2_81_mux_2_115_notSEL);


alu0_mux_3_80_mux_2_81_mux_2_115_AND_2 <= (ACC_CTL(1) and alu0_AND(7));


alu0_mux_3_80_mux_2_81_mux_2_115_Y <= (alu0_mux_3_80_mux_2_81_mux_2_115_AND_1 or alu0_mux_3_80_mux_2_81_mux_2_115_AND_2);


alu0_mux_3_80_MUX <= unsigned'(alu0_mux_3_80_mux_2_81_mux_2_115_Y & alu0_mux_3_80_mux_2_81_mux_2_114_Y & alu0_mux_3_80_mux_2_81_mux_2_113_Y & alu0_mux_3_80_mux_2_81_mux_2_112_Y & alu0_mux_3_80_mux_2_81_mux_2_111_Y & alu0_mux_3_80_mux_2_81_mux_2_110_Y & alu0_mux_3_80_mux_2_81_mux_2_19_Y & alu0_mux_3_80_mux_2_81_mux_2_18_Y);


alu0_mux_3_80_mux_2_82_mux_2_116_notSEL <= ((not ACC_CTL(2)) and '1');


alu0_mux_3_80_mux_2_82_mux_2_116_AND_1 <= (alu0_mux_3_80_MUX(0) and alu0_mux_3_80_mux_2_82_mux_2_116_notSEL);


alu0_mux_3_80_mux_2_82_mux_2_116_AND_2 <= (ACC_CTL(2) and DATA(0));


alu0_mux_3_80_mux_2_82_mux_2_116_Y <= (alu0_mux_3_80_mux_2_82_mux_2_116_AND_1 or alu0_mux_3_80_mux_2_82_mux_2_116_AND_2);


alu0_mux_3_80_mux_2_82_mux_2_117_notSEL <= ((not ACC_CTL(2)) and '1');


alu0_mux_3_80_mux_2_82_mux_2_117_AND_1 <= (alu0_mux_3_80_MUX(1) and alu0_mux_3_80_mux_2_82_mux_2_117_notSEL);


alu0_mux_3_80_mux_2_82_mux_2_117_AND_2 <= (ACC_CTL(2) and DATA(1));


alu0_mux_3_80_mux_2_82_mux_2_117_Y <= (alu0_mux_3_80_mux_2_82_mux_2_117_AND_1 or alu0_mux_3_80_mux_2_82_mux_2_117_AND_2);


alu0_mux_3_80_mux_2_82_mux_2_118_notSEL <= ((not ACC_CTL(2)) and '1');


alu0_mux_3_80_mux_2_82_mux_2_118_AND_1 <= (alu0_mux_3_80_MUX(2) and alu0_mux_3_80_mux_2_82_mux_2_118_notSEL);


alu0_mux_3_80_mux_2_82_mux_2_118_AND_2 <= (ACC_CTL(2) and DATA(2));


alu0_mux_3_80_mux_2_82_mux_2_118_Y <= (alu0_mux_3_80_mux_2_82_mux_2_118_AND_1 or alu0_mux_3_80_mux_2_82_mux_2_118_AND_2);


alu0_mux_3_80_mux_2_82_mux_2_119_notSEL <= ((not ACC_CTL(2)) and '1');


alu0_mux_3_80_mux_2_82_mux_2_119_AND_1 <= (alu0_mux_3_80_MUX(3) and alu0_mux_3_80_mux_2_82_mux_2_119_notSEL);


alu0_mux_3_80_mux_2_82_mux_2_119_AND_2 <= (ACC_CTL(2) and DATA(3));


alu0_mux_3_80_mux_2_82_mux_2_119_Y <= (alu0_mux_3_80_mux_2_82_mux_2_119_AND_1 or alu0_mux_3_80_mux_2_82_mux_2_119_AND_2);


alu0_mux_3_80_mux_2_82_mux_2_120_notSEL <= ((not ACC_CTL(2)) and '1');


alu0_mux_3_80_mux_2_82_mux_2_120_AND_1 <= (alu0_mux_3_80_MUX(4) and alu0_mux_3_80_mux_2_82_mux_2_120_notSEL);


alu0_mux_3_80_mux_2_82_mux_2_120_AND_2 <= (ACC_CTL(2) and DATA(4));


alu0_mux_3_80_mux_2_82_mux_2_120_Y <= (alu0_mux_3_80_mux_2_82_mux_2_120_AND_1 or alu0_mux_3_80_mux_2_82_mux_2_120_AND_2);


alu0_mux_3_80_mux_2_82_mux_2_121_notSEL <= ((not ACC_CTL(2)) and '1');


alu0_mux_3_80_mux_2_82_mux_2_121_AND_1 <= (alu0_mux_3_80_MUX(5) and alu0_mux_3_80_mux_2_82_mux_2_121_notSEL);


alu0_mux_3_80_mux_2_82_mux_2_121_AND_2 <= (ACC_CTL(2) and DATA(5));


alu0_mux_3_80_mux_2_82_mux_2_121_Y <= (alu0_mux_3_80_mux_2_82_mux_2_121_AND_1 or alu0_mux_3_80_mux_2_82_mux_2_121_AND_2);


alu0_mux_3_80_mux_2_82_mux_2_122_notSEL <= ((not ACC_CTL(2)) and '1');


alu0_mux_3_80_mux_2_82_mux_2_122_AND_1 <= (alu0_mux_3_80_MUX(6) and alu0_mux_3_80_mux_2_82_mux_2_122_notSEL);


alu0_mux_3_80_mux_2_82_mux_2_122_AND_2 <= (ACC_CTL(2) and DATA(6));


alu0_mux_3_80_mux_2_82_mux_2_122_Y <= (alu0_mux_3_80_mux_2_82_mux_2_122_AND_1 or alu0_mux_3_80_mux_2_82_mux_2_122_AND_2);


alu0_mux_3_80_mux_2_82_mux_2_123_notSEL <= ((not ACC_CTL(2)) and '1');


alu0_mux_3_80_mux_2_82_mux_2_123_AND_1 <= (alu0_mux_3_80_MUX(7) and alu0_mux_3_80_mux_2_82_mux_2_123_notSEL);


alu0_mux_3_80_mux_2_82_mux_2_123_AND_2 <= (ACC_CTL(2) and DATA(7));


alu0_mux_3_80_mux_2_82_mux_2_123_Y <= (alu0_mux_3_80_mux_2_82_mux_2_123_AND_1 or alu0_mux_3_80_mux_2_82_mux_2_123_AND_2);


ALU <= unsigned'(alu0_mux_3_80_mux_2_82_mux_2_123_Y & alu0_mux_3_80_mux_2_82_mux_2_122_Y & alu0_mux_3_80_mux_2_82_mux_2_121_Y & alu0_mux_3_80_mux_2_82_mux_2_120_Y & alu0_mux_3_80_mux_2_82_mux_2_119_Y & alu0_mux_3_80_mux_2_82_mux_2_118_Y & alu0_mux_3_80_mux_2_82_mux_2_117_Y & alu0_mux_3_80_mux_2_82_mux_2_116_Y);


mux_2_83_mux_2_124_notSEL <= ((not DATA_SEL) and '1');


mux_2_83_mux_2_124_AND_1 <= (IR(0) and mux_2_83_mux_2_124_notSEL);


mux_2_83_mux_2_124_AND_2 <= (DATA_SEL and DATA_IN(0));


mux_2_83_mux_2_124_Y <= (mux_2_83_mux_2_124_AND_1 or mux_2_83_mux_2_124_AND_2);


mux_2_83_mux_2_125_notSEL <= ((not DATA_SEL) and '1');


mux_2_83_mux_2_125_AND_1 <= (IR(1) and mux_2_83_mux_2_125_notSEL);


mux_2_83_mux_2_125_AND_2 <= (DATA_SEL and DATA_IN(1));


mux_2_83_mux_2_125_Y <= (mux_2_83_mux_2_125_AND_1 or mux_2_83_mux_2_125_AND_2);


mux_2_83_mux_2_126_notSEL <= ((not DATA_SEL) and '1');


mux_2_83_mux_2_126_AND_1 <= (IR(2) and mux_2_83_mux_2_126_notSEL);


mux_2_83_mux_2_126_AND_2 <= (DATA_SEL and DATA_IN(2));


mux_2_83_mux_2_126_Y <= (mux_2_83_mux_2_126_AND_1 or mux_2_83_mux_2_126_AND_2);


mux_2_83_mux_2_127_notSEL <= ((not DATA_SEL) and '1');


mux_2_83_mux_2_127_AND_1 <= (IR(3) and mux_2_83_mux_2_127_notSEL);


mux_2_83_mux_2_127_AND_2 <= (DATA_SEL and DATA_IN(3));


mux_2_83_mux_2_127_Y <= (mux_2_83_mux_2_127_AND_1 or mux_2_83_mux_2_127_AND_2);


mux_2_83_mux_2_128_notSEL <= ((not DATA_SEL) and '1');


mux_2_83_mux_2_128_AND_1 <= (IR(4) and mux_2_83_mux_2_128_notSEL);


mux_2_83_mux_2_128_AND_2 <= (DATA_SEL and DATA_IN(4));


mux_2_83_mux_2_128_Y <= (mux_2_83_mux_2_128_AND_1 or mux_2_83_mux_2_128_AND_2);


mux_2_83_mux_2_129_notSEL <= ((not DATA_SEL) and '1');


mux_2_83_mux_2_129_AND_1 <= (IR(5) and mux_2_83_mux_2_129_notSEL);


mux_2_83_mux_2_129_AND_2 <= (DATA_SEL and DATA_IN(5));


mux_2_83_mux_2_129_Y <= (mux_2_83_mux_2_129_AND_1 or mux_2_83_mux_2_129_AND_2);


mux_2_83_mux_2_130_notSEL <= ((not DATA_SEL) and '1');


mux_2_83_mux_2_130_AND_1 <= (IR(6) and mux_2_83_mux_2_130_notSEL);


mux_2_83_mux_2_130_AND_2 <= (DATA_SEL and DATA_IN(6));


mux_2_83_mux_2_130_Y <= (mux_2_83_mux_2_130_AND_1 or mux_2_83_mux_2_130_AND_2);


mux_2_83_mux_2_131_notSEL <= ((not DATA_SEL) and '1');


mux_2_83_mux_2_131_AND_1 <= (IR(7) and mux_2_83_mux_2_131_notSEL);


mux_2_83_mux_2_131_AND_2 <= (DATA_SEL and DATA_IN(7));


mux_2_83_mux_2_131_Y <= (mux_2_83_mux_2_131_AND_1 or mux_2_83_mux_2_131_AND_2);


DATA <= unsigned'(mux_2_83_mux_2_131_Y & mux_2_83_mux_2_130_Y & mux_2_83_mux_2_129_Y & mux_2_83_mux_2_128_Y & mux_2_83_mux_2_127_Y & mux_2_83_mux_2_126_Y & mux_2_83_mux_2_125_Y & mux_2_83_mux_2_124_Y);


mux_2_84_mux_2_132_notSEL <= ((not ADDR_SEL) and '1');


mux_2_84_mux_2_132_AND_1 <= (PC(0) and mux_2_84_mux_2_132_notSEL);


mux_2_84_mux_2_132_AND_2 <= (ADDR_SEL and IR(0));


mux_2_84_mux_2_132_Y <= (mux_2_84_mux_2_132_AND_1 or mux_2_84_mux_2_132_AND_2);


mux_2_84_mux_2_133_notSEL <= ((not ADDR_SEL) and '1');


mux_2_84_mux_2_133_AND_1 <= (PC(1) and mux_2_84_mux_2_133_notSEL);


mux_2_84_mux_2_133_AND_2 <= (ADDR_SEL and IR(1));


mux_2_84_mux_2_133_Y <= (mux_2_84_mux_2_133_AND_1 or mux_2_84_mux_2_133_AND_2);


mux_2_84_mux_2_134_notSEL <= ((not ADDR_SEL) and '1');


mux_2_84_mux_2_134_AND_1 <= (PC(2) and mux_2_84_mux_2_134_notSEL);


mux_2_84_mux_2_134_AND_2 <= (ADDR_SEL and IR(2));


mux_2_84_mux_2_134_Y <= (mux_2_84_mux_2_134_AND_1 or mux_2_84_mux_2_134_AND_2);


mux_2_84_mux_2_135_notSEL <= ((not ADDR_SEL) and '1');


mux_2_84_mux_2_135_AND_1 <= (PC(3) and mux_2_84_mux_2_135_notSEL);


mux_2_84_mux_2_135_AND_2 <= (ADDR_SEL and IR(3));


mux_2_84_mux_2_135_Y <= (mux_2_84_mux_2_135_AND_1 or mux_2_84_mux_2_135_AND_2);


mux_2_84_mux_2_136_notSEL <= ((not ADDR_SEL) and '1');


mux_2_84_mux_2_136_AND_1 <= (PC(4) and mux_2_84_mux_2_136_notSEL);


mux_2_84_mux_2_136_AND_2 <= (ADDR_SEL and IR(4));


mux_2_84_mux_2_136_Y <= (mux_2_84_mux_2_136_AND_1 or mux_2_84_mux_2_136_AND_2);


mux_2_84_mux_2_137_notSEL <= ((not ADDR_SEL) and '1');


mux_2_84_mux_2_137_AND_1 <= (PC(5) and mux_2_84_mux_2_137_notSEL);


mux_2_84_mux_2_137_AND_2 <= (ADDR_SEL and IR(5));


mux_2_84_mux_2_137_Y <= (mux_2_84_mux_2_137_AND_1 or mux_2_84_mux_2_137_AND_2);


mux_2_84_mux_2_138_notSEL <= ((not ADDR_SEL) and '1');


mux_2_84_mux_2_138_AND_1 <= (PC(6) and mux_2_84_mux_2_138_notSEL);


mux_2_84_mux_2_138_AND_2 <= (ADDR_SEL and IR(6));


mux_2_84_mux_2_138_Y <= (mux_2_84_mux_2_138_AND_1 or mux_2_84_mux_2_138_AND_2);


mux_2_84_mux_2_139_notSEL <= ((not ADDR_SEL) and '1');


mux_2_84_mux_2_139_AND_1 <= (PC(7) and mux_2_84_mux_2_139_notSEL);


mux_2_84_mux_2_139_AND_2 <= (ADDR_SEL and IR(7));


mux_2_84_mux_2_139_Y <= (mux_2_84_mux_2_139_AND_1 or mux_2_84_mux_2_139_AND_2);


ADDR <= unsigned'(mux_2_84_mux_2_139_Y & mux_2_84_mux_2_138_Y & mux_2_84_mux_2_137_Y & mux_2_84_mux_2_136_Y & mux_2_84_mux_2_135_Y & mux_2_84_mux_2_134_Y & mux_2_84_mux_2_133_Y & mux_2_84_mux_2_132_Y);

control_logic0_ring_counter0_logic: process (CLK, CLR) is
begin
    if (CLR = '1') then
        control_logic0_Q <= to_unsigned(1, 3);
    elsif rising_edge(CLK) then
        control_logic0_Q <= ((shift_left(control_logic0_Q, 1) and to_unsigned(7, 3)) or to_unsigned(control_logic0_Q(2), 3));
    end if;
end process control_logic0_ring_counter0_logic;


control_logic0_decoder_1hot_4_160_notIN_1 <= ((not IR(12)) and '1');


control_logic0_decoder_1hot_4_160_notIN_2 <= ((not IR(13)) and '1');


control_logic0_decoder_1hot_4_160_notIN_3 <= ((not IR(14)) and '1');


control_logic0_decoder_1hot_4_160_notIN_4 <= ((not IR(15)) and '1');


control_logic0_decoder_1hot_4_160_and_4_10_Y <= (((control_logic0_decoder_1hot_4_160_notIN_4 and control_logic0_decoder_1hot_4_160_notIN_3) and control_logic0_decoder_1hot_4_160_notIN_2) and control_logic0_decoder_1hot_4_160_notIN_1);


control_logic0_decoder_1hot_4_160_and_4_11_Y <= (((control_logic0_decoder_1hot_4_160_notIN_4 and control_logic0_decoder_1hot_4_160_notIN_3) and control_logic0_decoder_1hot_4_160_notIN_2) and IR(12));


control_logic0_decoder_1hot_4_160_and_4_12_Y <= (((control_logic0_decoder_1hot_4_160_notIN_4 and control_logic0_decoder_1hot_4_160_notIN_3) and IR(13)) and control_logic0_decoder_1hot_4_160_notIN_1);


control_logic0_decoder_1hot_4_160_and_4_13_Y <= (((control_logic0_decoder_1hot_4_160_notIN_4 and control_logic0_decoder_1hot_4_160_notIN_3) and IR(13)) and IR(12));


control_logic0_decoder_1hot_4_160_and_4_14_Y <= (((control_logic0_decoder_1hot_4_160_notIN_4 and IR(14)) and control_logic0_decoder_1hot_4_160_notIN_2) and control_logic0_decoder_1hot_4_160_notIN_1);


control_logic0_decoder_1hot_4_160_and_4_15_Y <= (((control_logic0_decoder_1hot_4_160_notIN_4 and IR(14)) and control_logic0_decoder_1hot_4_160_notIN_2) and IR(12));


control_logic0_decoder_1hot_4_160_and_4_16_Y <= (((control_logic0_decoder_1hot_4_160_notIN_4 and IR(14)) and IR(13)) and control_logic0_decoder_1hot_4_160_notIN_1);


control_logic0_decoder_1hot_4_160_and_4_17_Y <= (((control_logic0_decoder_1hot_4_160_notIN_4 and IR(14)) and IR(13)) and IR(12));


control_logic0_decoder_1hot_4_160_and_4_18_Y <= (((IR(15) and control_logic0_decoder_1hot_4_160_notIN_3) and control_logic0_decoder_1hot_4_160_notIN_2) and control_logic0_decoder_1hot_4_160_notIN_1);


control_logic0_decoder_1hot_4_160_and_4_19_Y <= (((IR(15) and control_logic0_decoder_1hot_4_160_notIN_3) and control_logic0_decoder_1hot_4_160_notIN_2) and IR(12));


control_logic0_decoder_1hot_4_160_and_4_110_Y <= (((IR(15) and control_logic0_decoder_1hot_4_160_notIN_3) and IR(13)) and control_logic0_decoder_1hot_4_160_notIN_1);


control_logic0_decoder_1hot_4_160_and_4_111_Y <= (((IR(15) and control_logic0_decoder_1hot_4_160_notIN_3) and IR(13)) and IR(12));


control_logic0_decoder_1hot_4_160_and_4_112_Y <= (((IR(15) and IR(14)) and control_logic0_decoder_1hot_4_160_notIN_2) and control_logic0_decoder_1hot_4_160_notIN_1);


control_logic0_decoder_1hot_4_160_and_4_113_Y <= (((IR(15) and IR(14)) and control_logic0_decoder_1hot_4_160_notIN_2) and IR(12));


control_logic0_decoder_1hot_4_160_and_4_114_Y <= (((IR(15) and IR(14)) and IR(13)) and control_logic0_decoder_1hot_4_160_notIN_1);


control_logic0_decoder_1hot_4_160_and_4_115_Y <= (((IR(15) and IR(14)) and IR(13)) and IR(12));


control_logic0_Y <= unsigned'(control_logic0_decoder_1hot_4_160_and_4_115_Y & control_logic0_decoder_1hot_4_160_and_4_114_Y & control_logic0_decoder_1hot_4_160_and_4_113_Y & control_logic0_decoder_1hot_4_160_and_4_112_Y & control_logic0_decoder_1hot_4_160_and_4_111_Y & control_logic0_decoder_1hot_4_160_and_4_110_Y & control_logic0_decoder_1hot_4_160_and_4_19_Y & control_logic0_decoder_1hot_4_160_and_4_18_Y & control_logic0_decoder_1hot_4_160_and_4_17_Y & control_logic0_decoder_1hot_4_160_and_4_16_Y & control_logic0_decoder_1hot_4_160_and_4_15_Y & control_logic0_decoder_1hot_4_160_and_4_14_Y & control_logic0_decoder_1hot_4_160_and_4_13_Y & control_logic0_decoder_1hot_4_160_and_4_12_Y & control_logic0_decoder_1hot_4_160_and_4_11_Y & control_logic0_decoder_1hot_4_160_and_4_10_Y);


control_logic0_SUB <= (control_logic0_Y(6) or control_logic0_Y(7));


control_logic0_notZ <= ((not Z) and '1');


IR_EN <= control_logic0_Q(0);


ROM_EN <= control_logic0_Q(0);


control_logic0_OR_1 <= (control_logic0_Q(1) or control_logic0_Q(2));


control_logic0_OR_2 <= ((control_logic0_Y(4) or control_logic0_Y(5)) or control_logic0_SUB);


RAM_WR <= (control_logic0_Q(2) and control_logic0_Y(5));


control_logic0_OR_3 <= (control_logic0_Q(1) or control_logic0_Q(2));


DATA_SEL <= (control_logic0_Y(4) or control_logic0_SUB);


control_logic0_AND_2 <= (control_logic0_Y(9) and Z);


control_logic0_AND_3 <= (control_logic0_Y(10) and control_logic0_notZ);


control_logic0_OR_5 <= (((((control_logic0_Y(0) or control_logic0_Y(1)) or control_logic0_Y(2)) or control_logic0_Y(3)) or control_logic0_Y(4)) or control_logic0_SUB);


control_logic0_or_2_160_OUT <= (control_logic0_Y(0) or control_logic0_Y(4));


control_logic0_buf_1_12_OUT <= control_logic0_Y(3);


control_logic0_or_2_161_OUT <= (control_logic0_Y(2) or control_logic0_Y(7));


RAM_EN <= (control_logic0_OR_1 and control_logic0_OR_2);


ADDR_SEL <= (control_logic0_OR_2 and control_logic0_OR_3);


PC_LD <= ((control_logic0_Y(8) or control_logic0_AND_2) or control_logic0_AND_3);


ACC_EN <= (control_logic0_OR_5 and control_logic0_Q(2));


control_logic0_notPC_LD <= ((not PC_LD) and '1');


control_logic0_AND_7 <= (PC_LD and control_logic0_Q(2));


control_logic0_AND_8 <= (control_logic0_notPC_LD and control_logic0_Q(1));


PC_EN <= (control_logic0_AND_7 or control_logic0_AND_8);


ACC_CTL <= unsigned'(control_logic0_or_2_160_OUT & control_logic0_buf_1_12_OUT & control_logic0_or_2_161_OUT);


Z <= ((not (((((((ACC(0) or ACC(1)) or ACC(2)) or ACC(3)) or ACC(4)) or ACC(5)) or ACC(6)) or ACC(7))) and '1');


DATA_OUT_2 <= IR(16-1 downto 12);


DATA_OUT_1 <= buf_1_41_A;


DATA_OUT_0 <= ACC;


DATA_OUT <= unsigned'(DATA_OUT_2 & DATA_OUT_1 & DATA_OUT_0);

end architecture MyHDL;
