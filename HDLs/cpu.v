/* Generated by Amaranth Yosys 0.50 (PyPI ver 0.50.0.0.post111, git sha1 b5170e139) */

(* top =  1  *)
(* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\SimpleCPU.py:20" *)
(* generator = "Amaranth" *)
module Cpu(clk, rst, DATA_OUT, ADDR, RAM_EN, RAM_WR, ROM_EN, DATA_IN);
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:123" *)
  wire [7:0] A;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\ControlLogic.py:22" *)
  wire [2:0] ACC_CTL;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\ControlLogic.py:21" *)
  wire ACC_EN;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\SimpleCPU.py:10" *)
  output [7:0] ADDR;
  wire [7:0] ADDR;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\ControlLogic.py:17" *)
  wire ADDR_SEL;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:124" *)
  wire [7:0] B;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Registers.py:33" *)
  wire CE;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Registers.py:56" *)
  wire \CE$13 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Registers.py:10" *)
  wire \CE$19 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:125" *)
  wire [2:0] CTL;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Registers.py:32" *)
  wire [15:0] D;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Registers.py:55" *)
  wire [7:0] \D$11 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Registers.py:9" *)
  wire [7:0] \D$17 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\ControlLogic.py:9" *)
  wire [3:0] \D$21 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Registers.py:32" *)
  input [15:0] DATA_IN;
  wire [15:0] DATA_IN;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\SimpleCPU.py:9" *)
  output [15:0] DATA_OUT;
  wire [15:0] DATA_OUT;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\ControlLogic.py:18" *)
  wire DATA_SEL;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\ControlLogic.py:13" *)
  wire IR_EN;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Registers.py:57" *)
  wire LD;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\ControlLogic.py:19" *)
  wire PC_EN;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\ControlLogic.py:20" *)
  wire PC_LD;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Registers.py:35" *)
  wire [15:0] Q;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Registers.py:12" *)
  wire [7:0] \Q$23 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Registers.py:59" *)
  wire [7:0] \Q$30 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\ControlLogic.py:15" *)
  output RAM_EN;
  wire RAM_EN;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\ControlLogic.py:15" *)
  wire \RAM_EN$31 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\ControlLogic.py:16" *)
  output RAM_WR;
  wire RAM_WR;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\ControlLogic.py:16" *)
  wire \RAM_WR$32 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\ControlLogic.py:14" *)
  output ROM_EN;
  wire ROM_EN;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\ControlLogic.py:14" *)
  wire \ROM_EN$33 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:127" *)
  wire [7:0] Y;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\ControlLogic.py:10" *)
  wire Z;
  (* src = "C:\\Users\\benhd\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\amaranth\\hdl\\_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "C:\\Users\\benhd\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\amaranth\\hdl\\_ir.py:283" *)
  input rst;
  wire rst;
  assign Z = ! (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\SimpleCPU.py:44" *) \Q$23 ;
  assign B = DATA_SEL ? (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\SimpleCPU.py:48" *) DATA_IN[7:0] : Q[7:0];
  assign ADDR = ADDR_SEL ? (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\SimpleCPU.py:55" *) Q[7:0] : \Q$30 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\SimpleCPU.py:25" *)
  \Cpu.alu  alu (
    .A(\Q$23 ),
    .B(B),
    .\CTL$6 (CTL),
    .Y(\D$17 )
  );
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\SimpleCPU.py:26" *)
  \Cpu.controlLogic  controlLogic (
    .A(Q[15:12]),
    .ACC_CTL(CTL),
    .ACC_EN(\CE$19 ),
    .ADDR_SEL(ADDR_SEL),
    .DATA_SEL(DATA_SEL),
    .IR_EN(ROM_EN),
    .PC_EN(\CE$13 ),
    .PC_LD(LD),
    .RAM_EN(RAM_EN),
    .RAM_WR(RAM_WR),
    .Z(Z),
    .clk(clk),
    .rst(rst)
  );
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\SimpleCPU.py:24" *)
  \Cpu.counter_PC  counter_PC (
    .CE(\CE$13 ),
    .D(Q[7:0]),
    .LD(LD),
    .Q(\Q$30 ),
    .clk(clk),
    .rst(rst)
  );
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\SimpleCPU.py:22" *)
  \Cpu.register16_IR  register16_IR (
    .CE(ROM_EN),
    .\D$1 (DATA_IN),
    .Q(Q),
    .clk(clk),
    .rst(rst)
  );
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\SimpleCPU.py:23" *)
  \Cpu.register8_ACC  register8_ACC (
    .CE(\CE$19 ),
    .\D$1 (\D$17 ),
    .Q(\Q$23 ),
    .clk(clk),
    .rst(rst)
  );
  assign D = DATA_IN;
  assign CE = ROM_EN;
  assign IR_EN = ROM_EN;
  assign \D$11  = Q[7:0];
  assign PC_EN = \CE$13 ;
  assign PC_LD = LD;
  assign Y = \D$17 ;
  assign ACC_EN = \CE$19 ;
  assign \D$21  = Q[15:12];
  assign A = \Q$23 ;
  assign ACC_CTL = CTL;
  assign \RAM_EN$31  = RAM_EN;
  assign \RAM_WR$32  = RAM_WR;
  assign \ROM_EN$33  = ROM_EN;
  assign DATA_OUT[7:0] = \Q$23 ;
  assign DATA_OUT[11:8] = 4'h0;
  assign DATA_OUT[15:12] = Q[15:12];
endmodule

(* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:130" *)
(* generator = "Amaranth" *)
module \Cpu.alu (Y, A, \CTL$6 , B);
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:95" *)
  input [7:0] A;
  wire [7:0] A;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:95" *)
  wire [7:0] \A$3 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Mux.py:31" *)
  wire [7:0] \A$7 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Mux.py:33" *)
  input [7:0] B;
  wire [7:0] B;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:96" *)
  wire [7:0] \B$4 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Mux.py:32" *)
  wire [7:0] \B$9 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Mux.py:33" *)
  wire [7:0] C;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:97" *)
  wire CTL;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:125" *)
  input [2:0] \CTL$6 ;
  wire [2:0] \CTL$6 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:99" *)
  wire [7:0] S;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Mux.py:34" *)
  wire [1:0] SEL;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Mux.py:35" *)
  output [7:0] Y;
  wire [7:0] Y;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Mux.py:35" *)
  wire [7:0] \Y$13 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:132" *)
  wire [7:0] andOut;
  assign andOut = A & (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:133" *) B;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:135" *)
  \Cpu.alu.addSub8bit  addSub8bit (
    .A(A),
    .B(B),
    .CTL(\CTL$6 [0]),
    .S(\A$7 )
  );
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:136" *)
  \Cpu.alu.mux3_8  mux3_8 (
    .A(\A$7 ),
    .B(andOut),
    .C(B),
    .SEL(\CTL$6 [2:1]),
    .Y(Y)
  );
  assign \A$3  = A;
  assign \B$4  = B;
  assign CTL = \CTL$6 [0];
  assign S = \A$7 ;
  assign \B$9  = andOut;
  assign C = B;
  assign SEL = \CTL$6 [2:1];
  assign \Y$13  = Y;
endmodule

(* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:104" *)
(* generator = "Amaranth" *)
module \Cpu.alu.addSub8bit (A, S, CTL, B);
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:95" *)
  input [7:0] A;
  wire [7:0] A;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:95" *)
  wire [7:0] \A$4 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:96" *)
  input [7:0] B;
  wire [7:0] B;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:66" *)
  wire [7:0] \B$5 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:107" *)
  wire [7:0] B_processed;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:67" *)
  input CTL;
  wire CTL;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:67" *)
  wire Cin;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:100" *)
  wire Cout;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:71" *)
  wire \Cout$10 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:70" *)
  output [7:0] S;
  wire [7:0] S;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:70" *)
  wire [7:0] \S$8 ;
  assign B_processed = B ^ (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:108" *) { CTL, CTL, CTL, CTL, CTL, CTL, CTL, CTL };
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:111" *)
  \Cpu.alu.addSub8bit.fa  fa (
    .\A$3 (A),
    .\B$5 (B_processed),
    .Cin(CTL),
    .\Cout$45 (Cout),
    .S(S)
  );
  assign \A$4  = A;
  assign \B$5  = B_processed;
  assign Cin = CTL;
  assign \S$8  = S;
  assign \Cout$10  = Cout;
endmodule

(* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:74" *)
(* generator = "Amaranth" *)
module \Cpu.alu.addSub8bit.fa (\A$3 , \Cout$45 , S, Cin, \B$5 );
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:23" *)
  wire A;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:23" *)
  wire \A$10 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:23" *)
  wire \A$15 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:23" *)
  wire \A$20 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:23" *)
  wire \A$25 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:65" *)
  input [7:0] \A$3 ;
  wire [7:0] \A$3 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:23" *)
  wire \A$30 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:23" *)
  wire \A$35 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:23" *)
  wire \A$40 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:24" *)
  wire B;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:24" *)
  wire \B$11 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:24" *)
  wire \B$16 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:24" *)
  wire \B$21 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:24" *)
  wire \B$26 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:24" *)
  wire \B$31 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:24" *)
  wire \B$36 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:24" *)
  wire \B$41 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:66" *)
  input [7:0] \B$5 ;
  wire [7:0] \B$5 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:67" *)
  input Cin;
  wire Cin;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:25" *)
  wire \Cin$12 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:25" *)
  wire \Cin$17 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:25" *)
  wire \Cin$22 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:25" *)
  wire \Cin$27 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:25" *)
  wire \Cin$32 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:25" *)
  wire \Cin$37 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:25" *)
  wire \Cin$42 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:25" *)
  wire \Cin$6 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:28" *)
  wire Cout;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:28" *)
  wire \Cout$14 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:28" *)
  wire \Cout$19 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:28" *)
  wire \Cout$24 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:28" *)
  wire \Cout$29 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:28" *)
  wire \Cout$34 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:28" *)
  wire \Cout$39 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:28" *)
  wire \Cout$44 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:71" *)
  output \Cout$45 ;
  wire \Cout$45 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:70" *)
  output [7:0] S;
  wire [7:0] S;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:27" *)
  wire \S$13 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:27" *)
  wire \S$18 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:27" *)
  wire \S$23 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:27" *)
  wire \S$28 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:27" *)
  wire \S$33 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:27" *)
  wire \S$38 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:27" *)
  wire \S$43 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:27" *)
  wire \S$8 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:77" *)
  wire [8:0] carry;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:82" *)
  \Cpu.alu.addSub8bit.fa.fa0  fa0 (
    .A(\A$3 [0]),
    .B(\B$5 [0]),
    .\B$6 (carry[0]),
    .Cout(Cout),
    .\S$8 (\S$8 )
  );
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:82" *)
  \Cpu.alu.addSub8bit.fa.fa1  fa1 (
    .A(\A$3 [1]),
    .B(\B$5 [1]),
    .\B$6 (carry[1]),
    .Cout(\Cout$14 ),
    .\S$8 (\S$13 )
  );
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:82" *)
  \Cpu.alu.addSub8bit.fa.fa2  fa2 (
    .A(\A$3 [2]),
    .B(\B$5 [2]),
    .\B$6 (carry[2]),
    .Cout(\Cout$19 ),
    .\S$8 (\S$18 )
  );
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:82" *)
  \Cpu.alu.addSub8bit.fa.fa3  fa3 (
    .A(\A$3 [3]),
    .B(\B$5 [3]),
    .\B$6 (carry[3]),
    .Cout(\Cout$24 ),
    .\S$8 (\S$23 )
  );
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:82" *)
  \Cpu.alu.addSub8bit.fa.fa4  fa4 (
    .A(\A$3 [4]),
    .B(\B$5 [4]),
    .\B$6 (carry[4]),
    .Cout(\Cout$29 ),
    .\S$8 (\S$28 )
  );
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:82" *)
  \Cpu.alu.addSub8bit.fa.fa5  fa5 (
    .A(\A$3 [5]),
    .B(\B$5 [5]),
    .\B$6 (carry[5]),
    .Cout(\Cout$34 ),
    .\S$8 (\S$33 )
  );
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:82" *)
  \Cpu.alu.addSub8bit.fa.fa6  fa6 (
    .A(\A$3 [6]),
    .B(\B$5 [6]),
    .\B$6 (carry[6]),
    .Cout(\Cout$39 ),
    .\S$8 (\S$38 )
  );
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:82" *)
  \Cpu.alu.addSub8bit.fa.fa7  fa7 (
    .A(\A$3 [7]),
    .B(\B$5 [7]),
    .\B$6 (carry[7]),
    .Cout(\Cout$44 ),
    .\S$8 (\S$43 )
  );
  assign A = \A$3 [0];
  assign B = \B$5 [0];
  assign \Cin$6  = carry[0];
  assign \A$10  = \A$3 [1];
  assign \B$11  = \B$5 [1];
  assign \Cin$12  = carry[1];
  assign \A$15  = \A$3 [2];
  assign \B$16  = \B$5 [2];
  assign \Cin$17  = carry[2];
  assign \A$20  = \A$3 [3];
  assign \B$21  = \B$5 [3];
  assign \Cin$22  = carry[3];
  assign \A$25  = \A$3 [4];
  assign \B$26  = \B$5 [4];
  assign \Cin$27  = carry[4];
  assign \A$30  = \A$3 [5];
  assign \B$31  = \B$5 [5];
  assign \Cin$32  = carry[5];
  assign \A$35  = \A$3 [6];
  assign \B$36  = \B$5 [6];
  assign \Cin$37  = carry[6];
  assign \A$40  = \A$3 [7];
  assign \B$41  = \B$5 [7];
  assign \Cin$42  = carry[7];
  assign \Cout$45  = carry[8];
  assign S[7] = \S$43 ;
  assign S[6] = \S$38 ;
  assign S[5] = \S$33 ;
  assign S[4] = \S$28 ;
  assign S[3] = \S$23 ;
  assign S[2] = \S$18 ;
  assign S[1] = \S$13 ;
  assign S[0] = \S$8 ;
  assign carry[8] = \Cout$44 ;
  assign carry[7] = \Cout$39 ;
  assign carry[6] = \Cout$34 ;
  assign carry[5] = \Cout$29 ;
  assign carry[4] = \Cout$24 ;
  assign carry[3] = \Cout$19 ;
  assign carry[2] = \Cout$14 ;
  assign carry[1] = Cout;
  assign carry[0] = Cin;
endmodule

(* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:31" *)
(* generator = "Amaranth" *)
module \Cpu.alu.addSub8bit.fa.fa0 (Cout, \S$8 , A, \B$6 , B);
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:23" *)
  input A;
  wire A;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:23" *)
  wire \A$1 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:8" *)
  wire \A$4 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:24" *)
  input B;
  wire B;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:24" *)
  wire \B$3 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:25" *)
  input \B$6 ;
  wire \B$6 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:25" *)
  wire Cin;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:28" *)
  output Cout;
  wire Cout;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:12" *)
  wire \Cout$11 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:12" *)
  wire \Cout$12 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:11" *)
  wire S;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:11" *)
  output \S$8 ;
  wire \S$8 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:11" *)
  wire \S$9 ;
  assign Cout = \Cout$11  | (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:49" *) \Cout$12 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:33" *)
  \Cpu.alu.addSub8bit.fa.fa0.ha1  ha1 (
    .A(A),
    .B(B),
    .Cout(\Cout$11 ),
    .S(\A$4 )
  );
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:34" *)
  \Cpu.alu.addSub8bit.fa.fa0.ha2  ha2 (
    .A(\A$4 ),
    .B(\B$6 ),
    .Cout(\Cout$12 ),
    .S(\S$8 )
  );
  assign \A$1  = A;
  assign \B$3  = B;
  assign S = \A$4 ;
  assign Cin = \B$6 ;
  assign \S$9  = \S$8 ;
endmodule

(* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:15" *)
(* generator = "Amaranth" *)
module \Cpu.alu.addSub8bit.fa.fa0.ha1 (S, Cout, A, B);
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:8" *)
  input A;
  wire A;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:9" *)
  input B;
  wire B;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:12" *)
  output Cout;
  wire Cout;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:11" *)
  output S;
  wire S;
  assign S = A ^ (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:17" *) B;
  assign Cout = A & (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:18" *) B;
endmodule

(* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:15" *)
(* generator = "Amaranth" *)
module \Cpu.alu.addSub8bit.fa.fa0.ha2 (S, Cout, B, A);
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:8" *)
  input A;
  wire A;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:9" *)
  input B;
  wire B;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:12" *)
  output Cout;
  wire Cout;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:11" *)
  output S;
  wire S;
  assign S = A ^ (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:17" *) B;
  assign Cout = A & (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:18" *) B;
endmodule

(* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:31" *)
(* generator = "Amaranth" *)
module \Cpu.alu.addSub8bit.fa.fa1 (Cout, \S$8 , A, \B$6 , B);
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:23" *)
  input A;
  wire A;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:23" *)
  wire \A$1 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:8" *)
  wire \A$4 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:24" *)
  input B;
  wire B;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:24" *)
  wire \B$3 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:25" *)
  input \B$6 ;
  wire \B$6 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:25" *)
  wire Cin;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:28" *)
  output Cout;
  wire Cout;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:12" *)
  wire \Cout$11 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:12" *)
  wire \Cout$12 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:11" *)
  wire S;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:11" *)
  output \S$8 ;
  wire \S$8 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:11" *)
  wire \S$9 ;
  assign Cout = \Cout$11  | (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:49" *) \Cout$12 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:33" *)
  \Cpu.alu.addSub8bit.fa.fa1.ha1  ha1 (
    .A(A),
    .B(B),
    .Cout(\Cout$11 ),
    .S(\A$4 )
  );
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:34" *)
  \Cpu.alu.addSub8bit.fa.fa1.ha2  ha2 (
    .A(\A$4 ),
    .B(\B$6 ),
    .Cout(\Cout$12 ),
    .S(\S$8 )
  );
  assign \A$1  = A;
  assign \B$3  = B;
  assign S = \A$4 ;
  assign Cin = \B$6 ;
  assign \S$9  = \S$8 ;
endmodule

(* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:15" *)
(* generator = "Amaranth" *)
module \Cpu.alu.addSub8bit.fa.fa1.ha1 (S, Cout, A, B);
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:8" *)
  input A;
  wire A;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:9" *)
  input B;
  wire B;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:12" *)
  output Cout;
  wire Cout;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:11" *)
  output S;
  wire S;
  assign S = A ^ (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:17" *) B;
  assign Cout = A & (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:18" *) B;
endmodule

(* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:15" *)
(* generator = "Amaranth" *)
module \Cpu.alu.addSub8bit.fa.fa1.ha2 (S, Cout, B, A);
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:8" *)
  input A;
  wire A;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:9" *)
  input B;
  wire B;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:12" *)
  output Cout;
  wire Cout;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:11" *)
  output S;
  wire S;
  assign S = A ^ (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:17" *) B;
  assign Cout = A & (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:18" *) B;
endmodule

(* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:31" *)
(* generator = "Amaranth" *)
module \Cpu.alu.addSub8bit.fa.fa2 (Cout, \S$8 , A, \B$6 , B);
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:23" *)
  input A;
  wire A;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:23" *)
  wire \A$1 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:8" *)
  wire \A$4 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:24" *)
  input B;
  wire B;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:24" *)
  wire \B$3 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:25" *)
  input \B$6 ;
  wire \B$6 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:25" *)
  wire Cin;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:28" *)
  output Cout;
  wire Cout;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:12" *)
  wire \Cout$11 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:12" *)
  wire \Cout$12 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:11" *)
  wire S;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:11" *)
  output \S$8 ;
  wire \S$8 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:11" *)
  wire \S$9 ;
  assign Cout = \Cout$11  | (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:49" *) \Cout$12 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:33" *)
  \Cpu.alu.addSub8bit.fa.fa2.ha1  ha1 (
    .A(A),
    .B(B),
    .Cout(\Cout$11 ),
    .S(\A$4 )
  );
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:34" *)
  \Cpu.alu.addSub8bit.fa.fa2.ha2  ha2 (
    .A(\A$4 ),
    .B(\B$6 ),
    .Cout(\Cout$12 ),
    .S(\S$8 )
  );
  assign \A$1  = A;
  assign \B$3  = B;
  assign S = \A$4 ;
  assign Cin = \B$6 ;
  assign \S$9  = \S$8 ;
endmodule

(* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:15" *)
(* generator = "Amaranth" *)
module \Cpu.alu.addSub8bit.fa.fa2.ha1 (S, Cout, A, B);
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:8" *)
  input A;
  wire A;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:9" *)
  input B;
  wire B;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:12" *)
  output Cout;
  wire Cout;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:11" *)
  output S;
  wire S;
  assign S = A ^ (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:17" *) B;
  assign Cout = A & (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:18" *) B;
endmodule

(* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:15" *)
(* generator = "Amaranth" *)
module \Cpu.alu.addSub8bit.fa.fa2.ha2 (S, Cout, B, A);
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:8" *)
  input A;
  wire A;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:9" *)
  input B;
  wire B;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:12" *)
  output Cout;
  wire Cout;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:11" *)
  output S;
  wire S;
  assign S = A ^ (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:17" *) B;
  assign Cout = A & (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:18" *) B;
endmodule

(* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:31" *)
(* generator = "Amaranth" *)
module \Cpu.alu.addSub8bit.fa.fa3 (Cout, \S$8 , A, \B$6 , B);
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:23" *)
  input A;
  wire A;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:23" *)
  wire \A$1 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:8" *)
  wire \A$4 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:24" *)
  input B;
  wire B;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:24" *)
  wire \B$3 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:25" *)
  input \B$6 ;
  wire \B$6 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:25" *)
  wire Cin;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:28" *)
  output Cout;
  wire Cout;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:12" *)
  wire \Cout$11 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:12" *)
  wire \Cout$12 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:11" *)
  wire S;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:11" *)
  output \S$8 ;
  wire \S$8 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:11" *)
  wire \S$9 ;
  assign Cout = \Cout$11  | (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:49" *) \Cout$12 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:33" *)
  \Cpu.alu.addSub8bit.fa.fa3.ha1  ha1 (
    .A(A),
    .B(B),
    .Cout(\Cout$11 ),
    .S(\A$4 )
  );
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:34" *)
  \Cpu.alu.addSub8bit.fa.fa3.ha2  ha2 (
    .A(\A$4 ),
    .B(\B$6 ),
    .Cout(\Cout$12 ),
    .S(\S$8 )
  );
  assign \A$1  = A;
  assign \B$3  = B;
  assign S = \A$4 ;
  assign Cin = \B$6 ;
  assign \S$9  = \S$8 ;
endmodule

(* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:15" *)
(* generator = "Amaranth" *)
module \Cpu.alu.addSub8bit.fa.fa3.ha1 (S, Cout, A, B);
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:8" *)
  input A;
  wire A;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:9" *)
  input B;
  wire B;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:12" *)
  output Cout;
  wire Cout;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:11" *)
  output S;
  wire S;
  assign S = A ^ (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:17" *) B;
  assign Cout = A & (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:18" *) B;
endmodule

(* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:15" *)
(* generator = "Amaranth" *)
module \Cpu.alu.addSub8bit.fa.fa3.ha2 (S, Cout, B, A);
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:8" *)
  input A;
  wire A;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:9" *)
  input B;
  wire B;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:12" *)
  output Cout;
  wire Cout;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:11" *)
  output S;
  wire S;
  assign S = A ^ (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:17" *) B;
  assign Cout = A & (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:18" *) B;
endmodule

(* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:31" *)
(* generator = "Amaranth" *)
module \Cpu.alu.addSub8bit.fa.fa4 (Cout, \S$8 , A, \B$6 , B);
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:23" *)
  input A;
  wire A;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:23" *)
  wire \A$1 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:8" *)
  wire \A$4 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:24" *)
  input B;
  wire B;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:24" *)
  wire \B$3 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:25" *)
  input \B$6 ;
  wire \B$6 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:25" *)
  wire Cin;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:28" *)
  output Cout;
  wire Cout;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:12" *)
  wire \Cout$11 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:12" *)
  wire \Cout$12 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:11" *)
  wire S;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:11" *)
  output \S$8 ;
  wire \S$8 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:11" *)
  wire \S$9 ;
  assign Cout = \Cout$11  | (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:49" *) \Cout$12 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:33" *)
  \Cpu.alu.addSub8bit.fa.fa4.ha1  ha1 (
    .A(A),
    .B(B),
    .Cout(\Cout$11 ),
    .S(\A$4 )
  );
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:34" *)
  \Cpu.alu.addSub8bit.fa.fa4.ha2  ha2 (
    .A(\A$4 ),
    .B(\B$6 ),
    .Cout(\Cout$12 ),
    .S(\S$8 )
  );
  assign \A$1  = A;
  assign \B$3  = B;
  assign S = \A$4 ;
  assign Cin = \B$6 ;
  assign \S$9  = \S$8 ;
endmodule

(* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:15" *)
(* generator = "Amaranth" *)
module \Cpu.alu.addSub8bit.fa.fa4.ha1 (S, Cout, A, B);
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:8" *)
  input A;
  wire A;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:9" *)
  input B;
  wire B;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:12" *)
  output Cout;
  wire Cout;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:11" *)
  output S;
  wire S;
  assign S = A ^ (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:17" *) B;
  assign Cout = A & (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:18" *) B;
endmodule

(* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:15" *)
(* generator = "Amaranth" *)
module \Cpu.alu.addSub8bit.fa.fa4.ha2 (S, Cout, B, A);
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:8" *)
  input A;
  wire A;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:9" *)
  input B;
  wire B;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:12" *)
  output Cout;
  wire Cout;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:11" *)
  output S;
  wire S;
  assign S = A ^ (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:17" *) B;
  assign Cout = A & (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:18" *) B;
endmodule

(* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:31" *)
(* generator = "Amaranth" *)
module \Cpu.alu.addSub8bit.fa.fa5 (Cout, \S$8 , A, \B$6 , B);
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:23" *)
  input A;
  wire A;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:23" *)
  wire \A$1 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:8" *)
  wire \A$4 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:24" *)
  input B;
  wire B;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:24" *)
  wire \B$3 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:25" *)
  input \B$6 ;
  wire \B$6 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:25" *)
  wire Cin;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:28" *)
  output Cout;
  wire Cout;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:12" *)
  wire \Cout$11 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:12" *)
  wire \Cout$12 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:11" *)
  wire S;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:11" *)
  output \S$8 ;
  wire \S$8 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:11" *)
  wire \S$9 ;
  assign Cout = \Cout$11  | (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:49" *) \Cout$12 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:33" *)
  \Cpu.alu.addSub8bit.fa.fa5.ha1  ha1 (
    .A(A),
    .B(B),
    .Cout(\Cout$11 ),
    .S(\A$4 )
  );
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:34" *)
  \Cpu.alu.addSub8bit.fa.fa5.ha2  ha2 (
    .A(\A$4 ),
    .B(\B$6 ),
    .Cout(\Cout$12 ),
    .S(\S$8 )
  );
  assign \A$1  = A;
  assign \B$3  = B;
  assign S = \A$4 ;
  assign Cin = \B$6 ;
  assign \S$9  = \S$8 ;
endmodule

(* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:15" *)
(* generator = "Amaranth" *)
module \Cpu.alu.addSub8bit.fa.fa5.ha1 (S, Cout, A, B);
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:8" *)
  input A;
  wire A;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:9" *)
  input B;
  wire B;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:12" *)
  output Cout;
  wire Cout;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:11" *)
  output S;
  wire S;
  assign S = A ^ (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:17" *) B;
  assign Cout = A & (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:18" *) B;
endmodule

(* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:15" *)
(* generator = "Amaranth" *)
module \Cpu.alu.addSub8bit.fa.fa5.ha2 (S, Cout, B, A);
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:8" *)
  input A;
  wire A;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:9" *)
  input B;
  wire B;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:12" *)
  output Cout;
  wire Cout;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:11" *)
  output S;
  wire S;
  assign S = A ^ (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:17" *) B;
  assign Cout = A & (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:18" *) B;
endmodule

(* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:31" *)
(* generator = "Amaranth" *)
module \Cpu.alu.addSub8bit.fa.fa6 (Cout, \S$8 , A, \B$6 , B);
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:23" *)
  input A;
  wire A;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:23" *)
  wire \A$1 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:8" *)
  wire \A$4 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:24" *)
  input B;
  wire B;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:24" *)
  wire \B$3 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:25" *)
  input \B$6 ;
  wire \B$6 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:25" *)
  wire Cin;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:28" *)
  output Cout;
  wire Cout;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:12" *)
  wire \Cout$11 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:12" *)
  wire \Cout$12 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:11" *)
  wire S;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:11" *)
  output \S$8 ;
  wire \S$8 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:11" *)
  wire \S$9 ;
  assign Cout = \Cout$11  | (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:49" *) \Cout$12 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:33" *)
  \Cpu.alu.addSub8bit.fa.fa6.ha1  ha1 (
    .A(A),
    .B(B),
    .Cout(\Cout$11 ),
    .S(\A$4 )
  );
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:34" *)
  \Cpu.alu.addSub8bit.fa.fa6.ha2  ha2 (
    .A(\A$4 ),
    .B(\B$6 ),
    .Cout(\Cout$12 ),
    .S(\S$8 )
  );
  assign \A$1  = A;
  assign \B$3  = B;
  assign S = \A$4 ;
  assign Cin = \B$6 ;
  assign \S$9  = \S$8 ;
endmodule

(* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:15" *)
(* generator = "Amaranth" *)
module \Cpu.alu.addSub8bit.fa.fa6.ha1 (S, Cout, A, B);
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:8" *)
  input A;
  wire A;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:9" *)
  input B;
  wire B;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:12" *)
  output Cout;
  wire Cout;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:11" *)
  output S;
  wire S;
  assign S = A ^ (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:17" *) B;
  assign Cout = A & (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:18" *) B;
endmodule

(* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:15" *)
(* generator = "Amaranth" *)
module \Cpu.alu.addSub8bit.fa.fa6.ha2 (S, Cout, B, A);
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:8" *)
  input A;
  wire A;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:9" *)
  input B;
  wire B;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:12" *)
  output Cout;
  wire Cout;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:11" *)
  output S;
  wire S;
  assign S = A ^ (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:17" *) B;
  assign Cout = A & (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:18" *) B;
endmodule

(* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:31" *)
(* generator = "Amaranth" *)
module \Cpu.alu.addSub8bit.fa.fa7 (Cout, \S$8 , A, \B$6 , B);
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:23" *)
  input A;
  wire A;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:23" *)
  wire \A$1 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:8" *)
  wire \A$4 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:24" *)
  input B;
  wire B;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:24" *)
  wire \B$3 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:25" *)
  input \B$6 ;
  wire \B$6 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:25" *)
  wire Cin;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:28" *)
  output Cout;
  wire Cout;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:12" *)
  wire \Cout$11 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:12" *)
  wire \Cout$12 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:11" *)
  wire S;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:11" *)
  output \S$8 ;
  wire \S$8 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:11" *)
  wire \S$9 ;
  assign Cout = \Cout$11  | (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:49" *) \Cout$12 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:33" *)
  \Cpu.alu.addSub8bit.fa.fa7.ha1  ha1 (
    .A(A),
    .B(B),
    .Cout(\Cout$11 ),
    .S(\A$4 )
  );
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:34" *)
  \Cpu.alu.addSub8bit.fa.fa7.ha2  ha2 (
    .A(\A$4 ),
    .B(\B$6 ),
    .Cout(\Cout$12 ),
    .S(\S$8 )
  );
  assign \A$1  = A;
  assign \B$3  = B;
  assign S = \A$4 ;
  assign Cin = \B$6 ;
  assign \S$9  = \S$8 ;
endmodule

(* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:15" *)
(* generator = "Amaranth" *)
module \Cpu.alu.addSub8bit.fa.fa7.ha1 (S, Cout, A, B);
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:8" *)
  input A;
  wire A;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:9" *)
  input B;
  wire B;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:12" *)
  output Cout;
  wire Cout;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:11" *)
  output S;
  wire S;
  assign S = A ^ (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:17" *) B;
  assign Cout = A & (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:18" *) B;
endmodule

(* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:15" *)
(* generator = "Amaranth" *)
module \Cpu.alu.addSub8bit.fa.fa7.ha2 (S, Cout, B, A);
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:8" *)
  input A;
  wire A;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:9" *)
  input B;
  wire B;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:12" *)
  output Cout;
  wire Cout;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:11" *)
  output S;
  wire S;
  assign S = A ^ (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:17" *) B;
  assign Cout = A & (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:18" *) B;
endmodule

(* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Mux.py:38" *)
(* generator = "Amaranth" *)
module \Cpu.alu.mux3_8 (B, Y, A, SEL, C);
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Mux.py:31" *)
  input [7:0] A;
  wire [7:0] A;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Mux.py:32" *)
  input [7:0] B;
  wire [7:0] B;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Mux.py:33" *)
  input [7:0] C;
  wire [7:0] C;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Mux.py:34" *)
  input [1:0] SEL;
  wire [1:0] SEL;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Mux.py:35" *)
  output [7:0] Y;
  wire [7:0] Y;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Mux.py:41" *)
  wire [7:0] mux_ab;
  assign mux_ab = SEL[0] ? (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Mux.py:42" *) B : A;
  assign Y = SEL[1] ? (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Mux.py:45" *) C : mux_ab;
endmodule

(* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\ControlLogic.py:25" *)
(* generator = "Amaranth" *)
module \Cpu.controlLogic (rst, Z, RAM_WR, DATA_SEL, RAM_EN, ADDR_SEL, PC_LD, ACC_EN, PC_EN, A, ACC_CTL, IR_EN, clk);
  wire \$1 ;
  wire \$2 ;
  wire \$3 ;
  wire \$4 ;
  wire \$5 ;
  wire \$6 ;
  wire \$7 ;
  wire \$8 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\ControlLogic.py:9" *)
  input [3:0] A;
  wire [3:0] A;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\ControlLogic.py:22" *)
  output [2:0] ACC_CTL;
  wire [2:0] ACC_CTL;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\ControlLogic.py:21" *)
  output ACC_EN;
  wire ACC_EN;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\ControlLogic.py:17" *)
  output ADDR_SEL;
  wire ADDR_SEL;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\ControlLogic.py:44" *)
  wire AND_2;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\ControlLogic.py:45" *)
  wire AND_3;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\ControlLogic.py:46" *)
  wire AND_7;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\ControlLogic.py:47" *)
  wire AND_8;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\ControlLogic.py:9" *)
  wire [3:0] D;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\ControlLogic.py:18" *)
  output DATA_SEL;
  wire DATA_SEL;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\ControlLogic.py:14" *)
  output IR_EN;
  wire IR_EN;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\ControlLogic.py:40" *)
  wire OR_1;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\ControlLogic.py:41" *)
  wire OR_2;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\ControlLogic.py:42" *)
  wire OR_3;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\ControlLogic.py:43" *)
  wire OR_5;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\ControlLogic.py:19" *)
  output PC_EN;
  wire PC_EN;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\ControlLogic.py:20" *)
  output PC_LD;
  wire PC_LD;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:53" *)
  wire [2:0] Q;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\ControlLogic.py:15" *)
  output RAM_EN;
  wire RAM_EN;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\ControlLogic.py:16" *)
  output RAM_WR;
  wire RAM_WR;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\ControlLogic.py:14" *)
  wire ROM_EN;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\ControlLogic.py:48" *)
  wire SUB;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\OneHotDecoder.py:8" *)
  wire [15:0] Y;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\ControlLogic.py:10" *)
  input Z;
  wire Z;
  (* src = "C:\\Users\\benhd\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\amaranth\\hdl\\_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\ControlLogic.py:39" *)
  wire notPC_LD;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\ControlLogic.py:38" *)
  wire notZ;
  (* src = "C:\\Users\\benhd\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\amaranth\\hdl\\_ir.py:283" *)
  input rst;
  wire rst;
  assign notZ = ~ (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\ControlLogic.py:53" *) Z;
  assign OR_1 = Q[1] | (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\ControlLogic.py:58" *) Q[2];
  assign \$1  = Y[4] | (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\ControlLogic.py:59" *) Y[5];
  assign OR_2 = \$1  | (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\ControlLogic.py:59" *) SUB;
  assign RAM_WR = Q[2] & (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\ControlLogic.py:60" *) Y[5];
  assign OR_3 = Q[1] | (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\ControlLogic.py:61" *) Q[2];
  assign DATA_SEL = Y[4] | (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\ControlLogic.py:62" *) SUB;
  assign AND_2 = Y[9] & (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\ControlLogic.py:63" *) Z;
  assign AND_3 = Y[10] & (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\ControlLogic.py:64" *) notZ;
  assign \$2  = Y[0] | (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\ControlLogic.py:65" *) Y[1];
  assign \$3  = \$2  | (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\ControlLogic.py:65" *) Y[2];
  assign \$4  = \$3  | (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\ControlLogic.py:65" *) Y[3];
  assign \$5  = \$4  | (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\ControlLogic.py:65" *) Y[4];
  assign OR_5 = \$5  | (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\ControlLogic.py:65" *) SUB;
  assign \$6  = Y[0] | (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\ControlLogic.py:67" *) Y[4];
  assign \$7  = Y[2] | (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\ControlLogic.py:69" *) Y[7];
  assign RAM_EN = OR_1 & (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\ControlLogic.py:71" *) OR_2;
  assign ADDR_SEL = OR_2 & (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\ControlLogic.py:72" *) OR_3;
  assign \$8  = Y[8] | (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\ControlLogic.py:73" *) AND_2;
  assign PC_LD = \$8  | (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\ControlLogic.py:73" *) AND_3;
  assign ACC_EN = OR_5 & (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\ControlLogic.py:75" *) Q[2];
  assign notPC_LD = ~ (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\ControlLogic.py:76" *) PC_LD;
  assign AND_7 = PC_LD & (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\ControlLogic.py:77" *) Q[2];
  assign AND_8 = notPC_LD & (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\ControlLogic.py:78" *) Q[1];
  assign PC_EN = AND_7 | (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\ControlLogic.py:79" *) AND_8;
  assign SUB = Y[6] | (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\ControlLogic.py:52" *) Y[7];
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\ControlLogic.py:29" *)
  \Cpu.controlLogic.dec  dec (
    .A(A),
    .Y(Y)
  );
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\ControlLogic.py:28" *)
  \Cpu.controlLogic.rc  rc (
    .Q(Q),
    .clk(clk),
    .rst(rst)
  );
  assign D = A;
  assign ROM_EN = Q[0];
  assign IR_EN = Q[0];
  assign ACC_CTL[0] = \$7 ;
  assign ACC_CTL[1] = Y[3];
  assign ACC_CTL[2] = \$6 ;
endmodule

(* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\OneHotDecoder.py:12" *)
(* generator = "Amaranth" *)
module \Cpu.controlLogic.dec (Y, A);
  wire \$1 ;
  wire \$10 ;
  wire \$11 ;
  wire \$12 ;
  wire \$13 ;
  wire \$14 ;
  wire \$15 ;
  wire \$16 ;
  wire \$17 ;
  wire \$18 ;
  wire \$19 ;
  wire \$2 ;
  wire \$20 ;
  wire \$21 ;
  wire \$22 ;
  wire \$23 ;
  wire \$24 ;
  wire \$25 ;
  wire \$26 ;
  wire \$27 ;
  wire \$28 ;
  wire \$29 ;
  wire \$3 ;
  wire \$30 ;
  wire \$31 ;
  wire \$32 ;
  wire \$33 ;
  wire \$34 ;
  wire \$35 ;
  wire \$36 ;
  wire \$37 ;
  wire \$38 ;
  wire \$39 ;
  wire \$4 ;
  wire \$40 ;
  wire \$41 ;
  wire \$42 ;
  wire \$43 ;
  wire \$44 ;
  wire \$45 ;
  wire \$46 ;
  wire \$47 ;
  wire \$48 ;
  wire \$49 ;
  wire \$5 ;
  wire \$50 ;
  wire \$51 ;
  wire \$52 ;
  wire \$53 ;
  wire \$54 ;
  wire \$55 ;
  wire \$56 ;
  wire \$57 ;
  wire \$58 ;
  wire \$59 ;
  wire \$6 ;
  wire \$60 ;
  wire \$61 ;
  wire \$62 ;
  wire \$63 ;
  wire \$64 ;
  wire \$65 ;
  wire \$66 ;
  wire \$67 ;
  wire \$68 ;
  wire \$69 ;
  wire \$7 ;
  wire \$70 ;
  wire \$71 ;
  wire \$72 ;
  wire \$73 ;
  wire \$74 ;
  wire \$75 ;
  wire \$76 ;
  wire \$77 ;
  wire \$78 ;
  wire \$79 ;
  wire \$8 ;
  wire \$80 ;
  wire \$9 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\OneHotDecoder.py:6" *)
  input [3:0] A;
  wire [3:0] A;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\OneHotDecoder.py:8" *)
  output [15:0] Y;
  wire [15:0] Y;
  assign \$20  = ~ (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\OneHotDecoder.py:17" *) A[3];
  assign \$21  = ~ (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\OneHotDecoder.py:17" *) A[2];
  assign \$22  = \$20  & (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\OneHotDecoder.py:17" *) \$21 ;
  assign \$23  = \$22  & (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\OneHotDecoder.py:17" *) A[1];
  assign \$24  = \$23  & (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\OneHotDecoder.py:17" *) A[0];
  assign \$25  = ~ (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\OneHotDecoder.py:18" *) A[3];
  assign \$26  = \$25  & (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\OneHotDecoder.py:18" *) A[2];
  assign \$27  = ~ (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\OneHotDecoder.py:18" *) A[1];
  assign \$28  = \$26  & (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\OneHotDecoder.py:18" *) \$27 ;
  assign \$29  = ~ (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\OneHotDecoder.py:18" *) A[0];
  assign \$30  = \$28  & (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\OneHotDecoder.py:18" *) \$29 ;
  assign \$31  = ~ (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\OneHotDecoder.py:19" *) A[3];
  assign \$32  = \$31  & (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\OneHotDecoder.py:19" *) A[2];
  assign \$33  = ~ (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\OneHotDecoder.py:19" *) A[1];
  assign \$34  = \$32  & (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\OneHotDecoder.py:19" *) \$33 ;
  assign \$35  = \$34  & (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\OneHotDecoder.py:19" *) A[0];
  assign \$36  = ~ (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\OneHotDecoder.py:20" *) A[3];
  assign \$37  = \$36  & (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\OneHotDecoder.py:20" *) A[2];
  assign \$38  = \$37  & (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\OneHotDecoder.py:20" *) A[1];
  assign \$39  = ~ (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\OneHotDecoder.py:20" *) A[0];
  assign \$40  = \$38  & (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\OneHotDecoder.py:20" *) \$39 ;
  assign \$41  = ~ (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\OneHotDecoder.py:21" *) A[3];
  assign \$42  = \$41  & (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\OneHotDecoder.py:21" *) A[2];
  assign \$43  = \$42  & (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\OneHotDecoder.py:21" *) A[1];
  assign \$44  = \$43  & (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\OneHotDecoder.py:21" *) A[0];
  assign \$45  = ~ (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\OneHotDecoder.py:22" *) A[2];
  assign \$46  = A[3] & (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\OneHotDecoder.py:22" *) \$45 ;
  assign \$47  = ~ (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\OneHotDecoder.py:22" *) A[1];
  assign \$48  = \$46  & (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\OneHotDecoder.py:22" *) \$47 ;
  assign \$49  = ~ (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\OneHotDecoder.py:22" *) A[0];
  assign \$50  = \$48  & (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\OneHotDecoder.py:22" *) \$49 ;
  assign \$51  = ~ (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\OneHotDecoder.py:23" *) A[2];
  assign \$52  = A[3] & (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\OneHotDecoder.py:23" *) \$51 ;
  assign \$53  = ~ (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\OneHotDecoder.py:23" *) A[1];
  assign \$54  = \$52  & (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\OneHotDecoder.py:23" *) \$53 ;
  assign \$55  = \$54  & (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\OneHotDecoder.py:23" *) A[0];
  assign \$56  = ~ (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\OneHotDecoder.py:24" *) A[2];
  assign \$57  = A[3] & (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\OneHotDecoder.py:24" *) \$56 ;
  assign \$58  = \$57  & (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\OneHotDecoder.py:24" *) A[1];
  assign \$59  = ~ (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\OneHotDecoder.py:24" *) A[0];
  assign \$60  = \$58  & (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\OneHotDecoder.py:24" *) \$59 ;
  assign \$61  = ~ (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\OneHotDecoder.py:25" *) A[2];
  assign \$62  = A[3] & (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\OneHotDecoder.py:25" *) \$61 ;
  assign \$63  = \$62  & (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\OneHotDecoder.py:25" *) A[1];
  assign \$64  = \$63  & (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\OneHotDecoder.py:25" *) A[0];
  assign \$65  = A[3] & (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\OneHotDecoder.py:26" *) A[2];
  assign \$66  = ~ (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\OneHotDecoder.py:26" *) A[1];
  assign \$67  = \$65  & (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\OneHotDecoder.py:26" *) \$66 ;
  assign \$68  = ~ (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\OneHotDecoder.py:26" *) A[0];
  assign \$69  = \$67  & (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\OneHotDecoder.py:26" *) \$68 ;
  assign \$70  = A[3] & (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\OneHotDecoder.py:27" *) A[2];
  assign \$71  = ~ (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\OneHotDecoder.py:27" *) A[1];
  assign \$72  = \$70  & (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\OneHotDecoder.py:27" *) \$71 ;
  assign \$73  = \$72  & (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\OneHotDecoder.py:27" *) A[0];
  assign \$74  = A[3] & (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\OneHotDecoder.py:28" *) A[2];
  assign \$75  = \$74  & (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\OneHotDecoder.py:28" *) A[1];
  assign \$76  = ~ (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\OneHotDecoder.py:28" *) A[0];
  assign \$77  = \$75  & (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\OneHotDecoder.py:28" *) \$76 ;
  assign \$78  = A[3] & (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\OneHotDecoder.py:29" *) A[2];
  assign \$79  = \$78  & (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\OneHotDecoder.py:29" *) A[1];
  assign \$80  = \$79  & (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\OneHotDecoder.py:29" *) A[0];
  assign \$1  = ~ (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\OneHotDecoder.py:14" *) A[3];
  assign \$2  = ~ (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\OneHotDecoder.py:14" *) A[2];
  assign \$3  = \$1  & (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\OneHotDecoder.py:14" *) \$2 ;
  assign \$4  = ~ (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\OneHotDecoder.py:14" *) A[1];
  assign \$5  = \$3  & (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\OneHotDecoder.py:14" *) \$4 ;
  assign \$6  = ~ (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\OneHotDecoder.py:14" *) A[0];
  assign \$7  = \$5  & (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\OneHotDecoder.py:14" *) \$6 ;
  assign \$8  = ~ (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\OneHotDecoder.py:15" *) A[3];
  assign \$9  = ~ (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\OneHotDecoder.py:15" *) A[2];
  assign \$10  = \$8  & (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\OneHotDecoder.py:15" *) \$9 ;
  assign \$11  = ~ (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\OneHotDecoder.py:15" *) A[1];
  assign \$12  = \$10  & (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\OneHotDecoder.py:15" *) \$11 ;
  assign \$13  = \$12  & (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\OneHotDecoder.py:15" *) A[0];
  assign \$14  = ~ (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\OneHotDecoder.py:16" *) A[3];
  assign \$15  = ~ (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\OneHotDecoder.py:16" *) A[2];
  assign \$16  = \$14  & (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\OneHotDecoder.py:16" *) \$15 ;
  assign \$17  = \$16  & (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\OneHotDecoder.py:16" *) A[1];
  assign \$18  = ~ (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\OneHotDecoder.py:16" *) A[0];
  assign \$19  = \$17  & (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\OneHotDecoder.py:16" *) \$18 ;
  assign Y[15] = \$80 ;
  assign Y[14] = \$77 ;
  assign Y[13] = \$73 ;
  assign Y[12] = \$69 ;
  assign Y[11] = \$64 ;
  assign Y[10] = \$60 ;
  assign Y[9] = \$55 ;
  assign Y[8] = \$50 ;
  assign Y[7] = \$44 ;
  assign Y[6] = \$40 ;
  assign Y[5] = \$35 ;
  assign Y[4] = \$30 ;
  assign Y[3] = \$24 ;
  assign Y[2] = \$19 ;
  assign Y[1] = \$13 ;
  assign Y[0] = \$7 ;
endmodule

(* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:56" *)
(* generator = "Amaranth" *)
module \Cpu.controlLogic.rc (rst, Q, clk);
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:40" *)
  wire D;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:25" *)
  wire \D$2 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:25" *)
  wire \D$3 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:53" *)
  output [2:0] Q;
  wire [2:0] Q;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:42" *)
  wire \Q$4 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:27" *)
  wire \Q$5 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:27" *)
  wire \Q$6 ;
  (* src = "C:\\Users\\benhd\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\amaranth\\hdl\\_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "C:\\Users\\benhd\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\amaranth\\hdl\\_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:59" *)
  \Cpu.controlLogic.rc.FDC1  FDC1 (
    .D(Q[0]),
    .Q(\Q$5 ),
    .clk(clk),
    .rst(rst)
  );
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:60" *)
  \Cpu.controlLogic.rc.FDC2  FDC2 (
    .D(Q[1]),
    .Q(\Q$6 ),
    .clk(clk),
    .rst(rst)
  );
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:58" *)
  \Cpu.controlLogic.rc.FDP  FDP (
    .D(Q[2]),
    .Q(\Q$4 ),
    .clk(clk),
    .rst(rst)
  );
  assign D = Q[2];
  assign \D$2  = Q[0];
  assign \D$3  = Q[1];
  assign Q[2] = \Q$6 ;
  assign Q[1] = \Q$5 ;
  assign Q[0] = \Q$4 ;
endmodule

(* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:30" *)
(* generator = "Amaranth" *)
module \Cpu.controlLogic.rc.FDC1 (rst, D, Q, clk);
  reg \$auto$verilog_backend.cc:2355:dump_module$1  = 0;
  reg \$1 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:25" *)
  input D;
  wire D;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:27" *)
  output Q;
  reg Q = 1'h0;
  (* src = "C:\\Users\\benhd\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\amaranth\\hdl\\_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "C:\\Users\\benhd\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\amaranth\\hdl\\_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:27" *)
  always @(posedge clk)
    Q <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2355:dump_module$1 ) begin end
    \$1  = D;
    if (rst) begin
      \$1  = 1'h0;
    end
  end
endmodule

(* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:30" *)
(* generator = "Amaranth" *)
module \Cpu.controlLogic.rc.FDC2 (rst, D, Q, clk);
  reg \$auto$verilog_backend.cc:2355:dump_module$2  = 0;
  reg \$1 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:25" *)
  input D;
  wire D;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:27" *)
  output Q;
  reg Q = 1'h0;
  (* src = "C:\\Users\\benhd\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\amaranth\\hdl\\_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "C:\\Users\\benhd\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\amaranth\\hdl\\_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:27" *)
  always @(posedge clk)
    Q <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2355:dump_module$2 ) begin end
    \$1  = D;
    if (rst) begin
      \$1  = 1'h0;
    end
  end
endmodule

(* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:45" *)
(* generator = "Amaranth" *)
module \Cpu.controlLogic.rc.FDP (rst, D, Q, clk);
  reg \$auto$verilog_backend.cc:2355:dump_module$3  = 0;
  reg \$1 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:40" *)
  input D;
  wire D;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:42" *)
  output Q;
  reg Q = 1'h1;
  (* src = "C:\\Users\\benhd\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\amaranth\\hdl\\_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "C:\\Users\\benhd\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\amaranth\\hdl\\_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:42" *)
  always @(posedge clk)
    Q <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2355:dump_module$3 ) begin end
    \$1  = D;
    if (rst) begin
      \$1  = 1'h1;
    end
  end
endmodule

(* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Registers.py:62" *)
(* generator = "Amaranth" *)
module \Cpu.counter_PC (rst, LD, CE, D, Q, clk);
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:65" *)
  wire [7:0] A;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Registers.py:56" *)
  input CE;
  wire CE;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Registers.py:56" *)
  wire \CE$10 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:67" *)
  wire Cin;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Registers.py:55" *)
  input [7:0] D;
  wire [7:0] D;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Registers.py:9" *)
  wire [7:0] \D$7 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Registers.py:57" *)
  input LD;
  wire LD;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Registers.py:12" *)
  output [7:0] Q;
  wire [7:0] Q;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Registers.py:12" *)
  wire [7:0] \Q$11 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:70" *)
  wire [7:0] S;
  (* src = "C:\\Users\\benhd\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\amaranth\\hdl\\_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Registers.py:67" *)
  wire [7:0] muxOut;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Registers.py:68" *)
  wire notLD;
  (* src = "C:\\Users\\benhd\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\amaranth\\hdl\\_ir.py:283" *)
  input rst;
  wire rst;
  assign notLD = ~ (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Registers.py:71" *) LD;
  assign muxOut = LD ? (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Registers.py:73" *) D : Q;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Registers.py:65" *)
  \Cpu.counter_PC.fullAdder8bit  fullAdder8bit (
    .\A$3 (muxOut),
    .Cin(notLD),
    .S(\D$7 )
  );
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Registers.py:64" *)
  \Cpu.counter_PC.register8bit  register8bit (
    .CE(CE),
    .\D$1 (\D$7 ),
    .Q(Q),
    .clk(clk),
    .rst(rst)
  );
  assign A = muxOut;
  assign Cin = notLD;
  assign S = \D$7 ;
  assign \CE$10  = CE;
  assign \Q$11  = Q;
endmodule

(* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:74" *)
(* generator = "Amaranth" *)
module \Cpu.counter_PC.fullAdder8bit (\A$3 , S, Cin);
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:23" *)
  wire A;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:23" *)
  wire \A$10 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:23" *)
  wire \A$15 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:23" *)
  wire \A$20 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:23" *)
  wire \A$25 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:65" *)
  input [7:0] \A$3 ;
  wire [7:0] \A$3 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:23" *)
  wire \A$30 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:23" *)
  wire \A$35 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:23" *)
  wire \A$40 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:24" *)
  wire B;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:24" *)
  wire \B$11 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:24" *)
  wire \B$16 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:24" *)
  wire \B$21 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:24" *)
  wire \B$26 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:24" *)
  wire \B$31 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:24" *)
  wire \B$36 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:24" *)
  wire \B$41 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:66" *)
  wire [7:0] \B$5 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:67" *)
  input Cin;
  wire Cin;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:25" *)
  wire \Cin$12 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:25" *)
  wire \Cin$17 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:25" *)
  wire \Cin$22 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:25" *)
  wire \Cin$27 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:25" *)
  wire \Cin$32 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:25" *)
  wire \Cin$37 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:25" *)
  wire \Cin$42 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:25" *)
  wire \Cin$6 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:28" *)
  wire Cout;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:28" *)
  wire \Cout$14 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:28" *)
  wire \Cout$19 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:28" *)
  wire \Cout$24 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:28" *)
  wire \Cout$29 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:28" *)
  wire \Cout$34 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:28" *)
  wire \Cout$39 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:28" *)
  wire \Cout$44 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:71" *)
  wire \Cout$45 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:70" *)
  output [7:0] S;
  wire [7:0] S;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:27" *)
  wire \S$13 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:27" *)
  wire \S$18 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:27" *)
  wire \S$23 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:27" *)
  wire \S$28 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:27" *)
  wire \S$33 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:27" *)
  wire \S$38 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:27" *)
  wire \S$43 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:27" *)
  wire \S$8 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:77" *)
  wire [8:0] carry;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:82" *)
  \Cpu.counter_PC.fullAdder8bit.fa0  fa0 (
    .A(\A$3 [0]),
    .\B$6 (carry[0]),
    .Cout(Cout),
    .\S$8 (\S$8 )
  );
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:82" *)
  \Cpu.counter_PC.fullAdder8bit.fa1  fa1 (
    .A(\A$3 [1]),
    .\B$6 (carry[1]),
    .Cout(\Cout$14 ),
    .\S$8 (\S$13 )
  );
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:82" *)
  \Cpu.counter_PC.fullAdder8bit.fa2  fa2 (
    .A(\A$3 [2]),
    .\B$6 (carry[2]),
    .Cout(\Cout$19 ),
    .\S$8 (\S$18 )
  );
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:82" *)
  \Cpu.counter_PC.fullAdder8bit.fa3  fa3 (
    .A(\A$3 [3]),
    .\B$6 (carry[3]),
    .Cout(\Cout$24 ),
    .\S$8 (\S$23 )
  );
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:82" *)
  \Cpu.counter_PC.fullAdder8bit.fa4  fa4 (
    .A(\A$3 [4]),
    .\B$6 (carry[4]),
    .Cout(\Cout$29 ),
    .\S$8 (\S$28 )
  );
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:82" *)
  \Cpu.counter_PC.fullAdder8bit.fa5  fa5 (
    .A(\A$3 [5]),
    .\B$6 (carry[5]),
    .Cout(\Cout$34 ),
    .\S$8 (\S$33 )
  );
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:82" *)
  \Cpu.counter_PC.fullAdder8bit.fa6  fa6 (
    .A(\A$3 [6]),
    .\B$6 (carry[6]),
    .Cout(\Cout$39 ),
    .\S$8 (\S$38 )
  );
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:82" *)
  \Cpu.counter_PC.fullAdder8bit.fa7  fa7 (
    .A(\A$3 [7]),
    .\B$6 (carry[7]),
    .Cout(\Cout$44 ),
    .\S$8 (\S$43 )
  );
  assign A = \A$3 [0];
  assign B = 1'h0;
  assign \B$5  = 8'h00;
  assign \Cin$6  = carry[0];
  assign \A$10  = \A$3 [1];
  assign \B$11  = 1'h0;
  assign \Cin$12  = carry[1];
  assign \A$15  = \A$3 [2];
  assign \B$16  = 1'h0;
  assign \Cin$17  = carry[2];
  assign \A$20  = \A$3 [3];
  assign \B$21  = 1'h0;
  assign \Cin$22  = carry[3];
  assign \A$25  = \A$3 [4];
  assign \B$26  = 1'h0;
  assign \Cin$27  = carry[4];
  assign \A$30  = \A$3 [5];
  assign \B$31  = 1'h0;
  assign \Cin$32  = carry[5];
  assign \A$35  = \A$3 [6];
  assign \B$36  = 1'h0;
  assign \Cin$37  = carry[6];
  assign \A$40  = \A$3 [7];
  assign \B$41  = 1'h0;
  assign \Cin$42  = carry[7];
  assign \Cout$45  = carry[8];
  assign S[7] = \S$43 ;
  assign S[6] = \S$38 ;
  assign S[5] = \S$33 ;
  assign S[4] = \S$28 ;
  assign S[3] = \S$23 ;
  assign S[2] = \S$18 ;
  assign S[1] = \S$13 ;
  assign S[0] = \S$8 ;
  assign carry[8] = \Cout$44 ;
  assign carry[7] = \Cout$39 ;
  assign carry[6] = \Cout$34 ;
  assign carry[5] = \Cout$29 ;
  assign carry[4] = \Cout$24 ;
  assign carry[3] = \Cout$19 ;
  assign carry[2] = \Cout$14 ;
  assign carry[1] = Cout;
  assign carry[0] = Cin;
endmodule

(* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:31" *)
(* generator = "Amaranth" *)
module \Cpu.counter_PC.fullAdder8bit.fa0 (Cout, \S$8 , \B$6 , A);
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:23" *)
  input A;
  wire A;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:23" *)
  wire \A$1 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:8" *)
  wire \A$4 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:9" *)
  wire B;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:24" *)
  wire \B$3 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:25" *)
  input \B$6 ;
  wire \B$6 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:25" *)
  wire Cin;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:28" *)
  output Cout;
  wire Cout;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:12" *)
  wire \Cout$11 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:12" *)
  wire \Cout$12 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:11" *)
  wire S;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:11" *)
  output \S$8 ;
  wire \S$8 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:11" *)
  wire \S$9 ;
  assign Cout = \Cout$11  | (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:49" *) \Cout$12 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:33" *)
  \Cpu.counter_PC.fullAdder8bit.fa0.ha1  ha1 (
    .A(A),
    .Cout(\Cout$11 ),
    .S(\A$4 )
  );
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:34" *)
  \Cpu.counter_PC.fullAdder8bit.fa0.ha2  ha2 (
    .A(\A$4 ),
    .B(\B$6 ),
    .Cout(\Cout$12 ),
    .S(\S$8 )
  );
  assign \A$1  = A;
  assign B = 1'h0;
  assign \B$3  = 1'h0;
  assign S = \A$4 ;
  assign Cin = \B$6 ;
  assign \S$9  = \S$8 ;
endmodule

(* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:15" *)
(* generator = "Amaranth" *)
module \Cpu.counter_PC.fullAdder8bit.fa0.ha1 (S, Cout, A);
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:8" *)
  input A;
  wire A;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:9" *)
  wire B;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:12" *)
  output Cout;
  wire Cout;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:11" *)
  output S;
  wire S;
  assign B = 1'h0;
  assign S = A;
  assign Cout = 1'h0;
endmodule

(* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:15" *)
(* generator = "Amaranth" *)
module \Cpu.counter_PC.fullAdder8bit.fa0.ha2 (S, Cout, B, A);
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:8" *)
  input A;
  wire A;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:9" *)
  input B;
  wire B;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:12" *)
  output Cout;
  wire Cout;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:11" *)
  output S;
  wire S;
  assign S = A ^ (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:17" *) B;
  assign Cout = A & (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:18" *) B;
endmodule

(* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:31" *)
(* generator = "Amaranth" *)
module \Cpu.counter_PC.fullAdder8bit.fa1 (Cout, \S$8 , \B$6 , A);
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:23" *)
  input A;
  wire A;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:23" *)
  wire \A$1 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:8" *)
  wire \A$4 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:9" *)
  wire B;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:24" *)
  wire \B$3 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:25" *)
  input \B$6 ;
  wire \B$6 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:25" *)
  wire Cin;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:28" *)
  output Cout;
  wire Cout;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:12" *)
  wire \Cout$11 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:12" *)
  wire \Cout$12 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:11" *)
  wire S;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:11" *)
  output \S$8 ;
  wire \S$8 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:11" *)
  wire \S$9 ;
  assign Cout = \Cout$11  | (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:49" *) \Cout$12 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:33" *)
  \Cpu.counter_PC.fullAdder8bit.fa1.ha1  ha1 (
    .A(A),
    .Cout(\Cout$11 ),
    .S(\A$4 )
  );
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:34" *)
  \Cpu.counter_PC.fullAdder8bit.fa1.ha2  ha2 (
    .A(\A$4 ),
    .B(\B$6 ),
    .Cout(\Cout$12 ),
    .S(\S$8 )
  );
  assign \A$1  = A;
  assign B = 1'h0;
  assign \B$3  = 1'h0;
  assign S = \A$4 ;
  assign Cin = \B$6 ;
  assign \S$9  = \S$8 ;
endmodule

(* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:15" *)
(* generator = "Amaranth" *)
module \Cpu.counter_PC.fullAdder8bit.fa1.ha1 (S, Cout, A);
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:8" *)
  input A;
  wire A;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:9" *)
  wire B;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:12" *)
  output Cout;
  wire Cout;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:11" *)
  output S;
  wire S;
  assign B = 1'h0;
  assign S = A;
  assign Cout = 1'h0;
endmodule

(* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:15" *)
(* generator = "Amaranth" *)
module \Cpu.counter_PC.fullAdder8bit.fa1.ha2 (S, Cout, B, A);
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:8" *)
  input A;
  wire A;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:9" *)
  input B;
  wire B;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:12" *)
  output Cout;
  wire Cout;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:11" *)
  output S;
  wire S;
  assign S = A ^ (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:17" *) B;
  assign Cout = A & (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:18" *) B;
endmodule

(* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:31" *)
(* generator = "Amaranth" *)
module \Cpu.counter_PC.fullAdder8bit.fa2 (Cout, \S$8 , \B$6 , A);
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:23" *)
  input A;
  wire A;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:23" *)
  wire \A$1 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:8" *)
  wire \A$4 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:9" *)
  wire B;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:24" *)
  wire \B$3 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:25" *)
  input \B$6 ;
  wire \B$6 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:25" *)
  wire Cin;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:28" *)
  output Cout;
  wire Cout;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:12" *)
  wire \Cout$11 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:12" *)
  wire \Cout$12 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:11" *)
  wire S;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:11" *)
  output \S$8 ;
  wire \S$8 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:11" *)
  wire \S$9 ;
  assign Cout = \Cout$11  | (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:49" *) \Cout$12 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:33" *)
  \Cpu.counter_PC.fullAdder8bit.fa2.ha1  ha1 (
    .A(A),
    .Cout(\Cout$11 ),
    .S(\A$4 )
  );
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:34" *)
  \Cpu.counter_PC.fullAdder8bit.fa2.ha2  ha2 (
    .A(\A$4 ),
    .B(\B$6 ),
    .Cout(\Cout$12 ),
    .S(\S$8 )
  );
  assign \A$1  = A;
  assign B = 1'h0;
  assign \B$3  = 1'h0;
  assign S = \A$4 ;
  assign Cin = \B$6 ;
  assign \S$9  = \S$8 ;
endmodule

(* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:15" *)
(* generator = "Amaranth" *)
module \Cpu.counter_PC.fullAdder8bit.fa2.ha1 (S, Cout, A);
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:8" *)
  input A;
  wire A;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:9" *)
  wire B;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:12" *)
  output Cout;
  wire Cout;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:11" *)
  output S;
  wire S;
  assign B = 1'h0;
  assign S = A;
  assign Cout = 1'h0;
endmodule

(* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:15" *)
(* generator = "Amaranth" *)
module \Cpu.counter_PC.fullAdder8bit.fa2.ha2 (S, Cout, B, A);
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:8" *)
  input A;
  wire A;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:9" *)
  input B;
  wire B;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:12" *)
  output Cout;
  wire Cout;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:11" *)
  output S;
  wire S;
  assign S = A ^ (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:17" *) B;
  assign Cout = A & (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:18" *) B;
endmodule

(* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:31" *)
(* generator = "Amaranth" *)
module \Cpu.counter_PC.fullAdder8bit.fa3 (Cout, \S$8 , \B$6 , A);
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:23" *)
  input A;
  wire A;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:23" *)
  wire \A$1 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:8" *)
  wire \A$4 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:9" *)
  wire B;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:24" *)
  wire \B$3 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:25" *)
  input \B$6 ;
  wire \B$6 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:25" *)
  wire Cin;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:28" *)
  output Cout;
  wire Cout;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:12" *)
  wire \Cout$11 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:12" *)
  wire \Cout$12 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:11" *)
  wire S;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:11" *)
  output \S$8 ;
  wire \S$8 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:11" *)
  wire \S$9 ;
  assign Cout = \Cout$11  | (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:49" *) \Cout$12 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:33" *)
  \Cpu.counter_PC.fullAdder8bit.fa3.ha1  ha1 (
    .A(A),
    .Cout(\Cout$11 ),
    .S(\A$4 )
  );
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:34" *)
  \Cpu.counter_PC.fullAdder8bit.fa3.ha2  ha2 (
    .A(\A$4 ),
    .B(\B$6 ),
    .Cout(\Cout$12 ),
    .S(\S$8 )
  );
  assign \A$1  = A;
  assign B = 1'h0;
  assign \B$3  = 1'h0;
  assign S = \A$4 ;
  assign Cin = \B$6 ;
  assign \S$9  = \S$8 ;
endmodule

(* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:15" *)
(* generator = "Amaranth" *)
module \Cpu.counter_PC.fullAdder8bit.fa3.ha1 (S, Cout, A);
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:8" *)
  input A;
  wire A;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:9" *)
  wire B;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:12" *)
  output Cout;
  wire Cout;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:11" *)
  output S;
  wire S;
  assign B = 1'h0;
  assign S = A;
  assign Cout = 1'h0;
endmodule

(* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:15" *)
(* generator = "Amaranth" *)
module \Cpu.counter_PC.fullAdder8bit.fa3.ha2 (S, Cout, B, A);
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:8" *)
  input A;
  wire A;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:9" *)
  input B;
  wire B;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:12" *)
  output Cout;
  wire Cout;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:11" *)
  output S;
  wire S;
  assign S = A ^ (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:17" *) B;
  assign Cout = A & (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:18" *) B;
endmodule

(* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:31" *)
(* generator = "Amaranth" *)
module \Cpu.counter_PC.fullAdder8bit.fa4 (Cout, \S$8 , \B$6 , A);
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:23" *)
  input A;
  wire A;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:23" *)
  wire \A$1 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:8" *)
  wire \A$4 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:9" *)
  wire B;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:24" *)
  wire \B$3 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:25" *)
  input \B$6 ;
  wire \B$6 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:25" *)
  wire Cin;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:28" *)
  output Cout;
  wire Cout;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:12" *)
  wire \Cout$11 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:12" *)
  wire \Cout$12 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:11" *)
  wire S;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:11" *)
  output \S$8 ;
  wire \S$8 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:11" *)
  wire \S$9 ;
  assign Cout = \Cout$11  | (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:49" *) \Cout$12 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:33" *)
  \Cpu.counter_PC.fullAdder8bit.fa4.ha1  ha1 (
    .A(A),
    .Cout(\Cout$11 ),
    .S(\A$4 )
  );
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:34" *)
  \Cpu.counter_PC.fullAdder8bit.fa4.ha2  ha2 (
    .A(\A$4 ),
    .B(\B$6 ),
    .Cout(\Cout$12 ),
    .S(\S$8 )
  );
  assign \A$1  = A;
  assign B = 1'h0;
  assign \B$3  = 1'h0;
  assign S = \A$4 ;
  assign Cin = \B$6 ;
  assign \S$9  = \S$8 ;
endmodule

(* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:15" *)
(* generator = "Amaranth" *)
module \Cpu.counter_PC.fullAdder8bit.fa4.ha1 (S, Cout, A);
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:8" *)
  input A;
  wire A;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:9" *)
  wire B;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:12" *)
  output Cout;
  wire Cout;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:11" *)
  output S;
  wire S;
  assign B = 1'h0;
  assign S = A;
  assign Cout = 1'h0;
endmodule

(* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:15" *)
(* generator = "Amaranth" *)
module \Cpu.counter_PC.fullAdder8bit.fa4.ha2 (S, Cout, B, A);
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:8" *)
  input A;
  wire A;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:9" *)
  input B;
  wire B;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:12" *)
  output Cout;
  wire Cout;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:11" *)
  output S;
  wire S;
  assign S = A ^ (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:17" *) B;
  assign Cout = A & (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:18" *) B;
endmodule

(* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:31" *)
(* generator = "Amaranth" *)
module \Cpu.counter_PC.fullAdder8bit.fa5 (Cout, \S$8 , \B$6 , A);
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:23" *)
  input A;
  wire A;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:23" *)
  wire \A$1 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:8" *)
  wire \A$4 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:9" *)
  wire B;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:24" *)
  wire \B$3 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:25" *)
  input \B$6 ;
  wire \B$6 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:25" *)
  wire Cin;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:28" *)
  output Cout;
  wire Cout;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:12" *)
  wire \Cout$11 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:12" *)
  wire \Cout$12 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:11" *)
  wire S;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:11" *)
  output \S$8 ;
  wire \S$8 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:11" *)
  wire \S$9 ;
  assign Cout = \Cout$11  | (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:49" *) \Cout$12 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:33" *)
  \Cpu.counter_PC.fullAdder8bit.fa5.ha1  ha1 (
    .A(A),
    .Cout(\Cout$11 ),
    .S(\A$4 )
  );
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:34" *)
  \Cpu.counter_PC.fullAdder8bit.fa5.ha2  ha2 (
    .A(\A$4 ),
    .B(\B$6 ),
    .Cout(\Cout$12 ),
    .S(\S$8 )
  );
  assign \A$1  = A;
  assign B = 1'h0;
  assign \B$3  = 1'h0;
  assign S = \A$4 ;
  assign Cin = \B$6 ;
  assign \S$9  = \S$8 ;
endmodule

(* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:15" *)
(* generator = "Amaranth" *)
module \Cpu.counter_PC.fullAdder8bit.fa5.ha1 (S, Cout, A);
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:8" *)
  input A;
  wire A;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:9" *)
  wire B;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:12" *)
  output Cout;
  wire Cout;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:11" *)
  output S;
  wire S;
  assign B = 1'h0;
  assign S = A;
  assign Cout = 1'h0;
endmodule

(* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:15" *)
(* generator = "Amaranth" *)
module \Cpu.counter_PC.fullAdder8bit.fa5.ha2 (S, Cout, B, A);
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:8" *)
  input A;
  wire A;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:9" *)
  input B;
  wire B;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:12" *)
  output Cout;
  wire Cout;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:11" *)
  output S;
  wire S;
  assign S = A ^ (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:17" *) B;
  assign Cout = A & (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:18" *) B;
endmodule

(* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:31" *)
(* generator = "Amaranth" *)
module \Cpu.counter_PC.fullAdder8bit.fa6 (Cout, \S$8 , \B$6 , A);
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:23" *)
  input A;
  wire A;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:23" *)
  wire \A$1 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:8" *)
  wire \A$4 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:9" *)
  wire B;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:24" *)
  wire \B$3 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:25" *)
  input \B$6 ;
  wire \B$6 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:25" *)
  wire Cin;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:28" *)
  output Cout;
  wire Cout;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:12" *)
  wire \Cout$11 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:12" *)
  wire \Cout$12 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:11" *)
  wire S;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:11" *)
  output \S$8 ;
  wire \S$8 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:11" *)
  wire \S$9 ;
  assign Cout = \Cout$11  | (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:49" *) \Cout$12 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:33" *)
  \Cpu.counter_PC.fullAdder8bit.fa6.ha1  ha1 (
    .A(A),
    .Cout(\Cout$11 ),
    .S(\A$4 )
  );
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:34" *)
  \Cpu.counter_PC.fullAdder8bit.fa6.ha2  ha2 (
    .A(\A$4 ),
    .B(\B$6 ),
    .Cout(\Cout$12 ),
    .S(\S$8 )
  );
  assign \A$1  = A;
  assign B = 1'h0;
  assign \B$3  = 1'h0;
  assign S = \A$4 ;
  assign Cin = \B$6 ;
  assign \S$9  = \S$8 ;
endmodule

(* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:15" *)
(* generator = "Amaranth" *)
module \Cpu.counter_PC.fullAdder8bit.fa6.ha1 (S, Cout, A);
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:8" *)
  input A;
  wire A;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:9" *)
  wire B;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:12" *)
  output Cout;
  wire Cout;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:11" *)
  output S;
  wire S;
  assign B = 1'h0;
  assign S = A;
  assign Cout = 1'h0;
endmodule

(* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:15" *)
(* generator = "Amaranth" *)
module \Cpu.counter_PC.fullAdder8bit.fa6.ha2 (S, Cout, B, A);
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:8" *)
  input A;
  wire A;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:9" *)
  input B;
  wire B;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:12" *)
  output Cout;
  wire Cout;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:11" *)
  output S;
  wire S;
  assign S = A ^ (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:17" *) B;
  assign Cout = A & (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:18" *) B;
endmodule

(* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:31" *)
(* generator = "Amaranth" *)
module \Cpu.counter_PC.fullAdder8bit.fa7 (Cout, \S$8 , \B$6 , A);
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:23" *)
  input A;
  wire A;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:23" *)
  wire \A$1 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:8" *)
  wire \A$4 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:9" *)
  wire B;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:24" *)
  wire \B$3 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:25" *)
  input \B$6 ;
  wire \B$6 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:25" *)
  wire Cin;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:28" *)
  output Cout;
  wire Cout;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:12" *)
  wire \Cout$11 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:12" *)
  wire \Cout$12 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:11" *)
  wire S;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:11" *)
  output \S$8 ;
  wire \S$8 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:11" *)
  wire \S$9 ;
  assign Cout = \Cout$11  | (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:49" *) \Cout$12 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:33" *)
  \Cpu.counter_PC.fullAdder8bit.fa7.ha1  ha1 (
    .A(A),
    .Cout(\Cout$11 ),
    .S(\A$4 )
  );
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:34" *)
  \Cpu.counter_PC.fullAdder8bit.fa7.ha2  ha2 (
    .A(\A$4 ),
    .B(\B$6 ),
    .Cout(\Cout$12 ),
    .S(\S$8 )
  );
  assign \A$1  = A;
  assign B = 1'h0;
  assign \B$3  = 1'h0;
  assign S = \A$4 ;
  assign Cin = \B$6 ;
  assign \S$9  = \S$8 ;
endmodule

(* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:15" *)
(* generator = "Amaranth" *)
module \Cpu.counter_PC.fullAdder8bit.fa7.ha1 (S, Cout, A);
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:8" *)
  input A;
  wire A;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:9" *)
  wire B;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:12" *)
  output Cout;
  wire Cout;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:11" *)
  output S;
  wire S;
  assign B = 1'h0;
  assign S = A;
  assign Cout = 1'h0;
endmodule

(* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:15" *)
(* generator = "Amaranth" *)
module \Cpu.counter_PC.fullAdder8bit.fa7.ha2 (S, Cout, B, A);
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:8" *)
  input A;
  wire A;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:9" *)
  input B;
  wire B;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:12" *)
  output Cout;
  wire Cout;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:11" *)
  output S;
  wire S;
  assign S = A ^ (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:17" *) B;
  assign Cout = A & (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Math.py:18" *) B;
endmodule

(* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Registers.py:15" *)
(* generator = "Amaranth" *)
module \Cpu.counter_PC.register8bit (rst, CE, Q, \D$1 , clk);
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:9" *)
  input CE;
  wire CE;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:9" *)
  wire \CE$10 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:9" *)
  wire \CE$13 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:9" *)
  wire \CE$16 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:9" *)
  wire \CE$19 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:9" *)
  wire \CE$22 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:9" *)
  wire \CE$25 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Registers.py:10" *)
  wire \CE$3 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:9" *)
  wire \CE$7 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:8" *)
  wire D;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Registers.py:9" *)
  input [7:0] \D$1 ;
  wire [7:0] \D$1 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:8" *)
  wire \D$12 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:8" *)
  wire \D$15 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:8" *)
  wire \D$18 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:8" *)
  wire \D$21 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:8" *)
  wire \D$24 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:8" *)
  wire \D$6 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:8" *)
  wire \D$9 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Registers.py:12" *)
  output [7:0] Q;
  wire [7:0] Q;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:11" *)
  wire \Q$11 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:11" *)
  wire \Q$14 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:11" *)
  wire \Q$17 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:11" *)
  wire \Q$20 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:11" *)
  wire \Q$23 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:11" *)
  wire \Q$26 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:11" *)
  wire \Q$5 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:11" *)
  wire \Q$8 ;
  (* src = "C:\\Users\\benhd\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\amaranth\\hdl\\_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "C:\\Users\\benhd\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\amaranth\\hdl\\_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Registers.py:20" *)
  \Cpu.counter_PC.register8bit.U$0  \U$0  (
    .CE(CE),
    .D(\D$1 [0]),
    .Q(\Q$5 ),
    .clk(clk),
    .rst(rst)
  );
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Registers.py:20" *)
  \Cpu.counter_PC.register8bit.U$1  \U$1  (
    .CE(CE),
    .D(\D$1 [1]),
    .Q(\Q$8 ),
    .clk(clk),
    .rst(rst)
  );
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Registers.py:20" *)
  \Cpu.counter_PC.register8bit.U$2  \U$2  (
    .CE(CE),
    .D(\D$1 [2]),
    .Q(\Q$11 ),
    .clk(clk),
    .rst(rst)
  );
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Registers.py:20" *)
  \Cpu.counter_PC.register8bit.U$3  \U$3  (
    .CE(CE),
    .D(\D$1 [3]),
    .Q(\Q$14 ),
    .clk(clk),
    .rst(rst)
  );
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Registers.py:20" *)
  \Cpu.counter_PC.register8bit.U$4  \U$4  (
    .CE(CE),
    .D(\D$1 [4]),
    .Q(\Q$17 ),
    .clk(clk),
    .rst(rst)
  );
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Registers.py:20" *)
  \Cpu.counter_PC.register8bit.U$5  \U$5  (
    .CE(CE),
    .D(\D$1 [5]),
    .Q(\Q$20 ),
    .clk(clk),
    .rst(rst)
  );
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Registers.py:20" *)
  \Cpu.counter_PC.register8bit.U$6  \U$6  (
    .CE(CE),
    .D(\D$1 [6]),
    .Q(\Q$23 ),
    .clk(clk),
    .rst(rst)
  );
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Registers.py:20" *)
  \Cpu.counter_PC.register8bit.U$7  \U$7  (
    .CE(CE),
    .D(\D$1 [7]),
    .Q(\Q$26 ),
    .clk(clk),
    .rst(rst)
  );
  assign D = \D$1 [0];
  assign \CE$3  = CE;
  assign \D$6  = \D$1 [1];
  assign \CE$7  = CE;
  assign \D$9  = \D$1 [2];
  assign \CE$10  = CE;
  assign \D$12  = \D$1 [3];
  assign \CE$13  = CE;
  assign \D$15  = \D$1 [4];
  assign \CE$16  = CE;
  assign \D$18  = \D$1 [5];
  assign \CE$19  = CE;
  assign \D$21  = \D$1 [6];
  assign \CE$22  = CE;
  assign \D$24  = \D$1 [7];
  assign \CE$25  = CE;
  assign Q[7] = \Q$26 ;
  assign Q[6] = \Q$23 ;
  assign Q[5] = \Q$20 ;
  assign Q[4] = \Q$17 ;
  assign Q[3] = \Q$14 ;
  assign Q[2] = \Q$11 ;
  assign Q[1] = \Q$8 ;
  assign Q[0] = \Q$5 ;
endmodule

(* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:14" *)
(* generator = "Amaranth" *)
module \Cpu.counter_PC.register8bit.U$0 (rst, CE, Q, D, clk);
  reg \$auto$verilog_backend.cc:2355:dump_module$4  = 0;
  reg \$1 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:9" *)
  input CE;
  wire CE;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:8" *)
  input D;
  wire D;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:11" *)
  output Q;
  reg Q = 1'h0;
  (* src = "C:\\Users\\benhd\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\amaranth\\hdl\\_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "C:\\Users\\benhd\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\amaranth\\hdl\\_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:11" *)
  always @(posedge clk)
    Q <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2355:dump_module$4 ) begin end
    \$1  = Q;
    if (CE) begin
      \$1  = D;
    end
    if (rst) begin
      \$1  = 1'h0;
    end
  end
endmodule

(* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:14" *)
(* generator = "Amaranth" *)
module \Cpu.counter_PC.register8bit.U$1 (rst, CE, Q, D, clk);
  reg \$auto$verilog_backend.cc:2355:dump_module$5  = 0;
  reg \$1 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:9" *)
  input CE;
  wire CE;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:8" *)
  input D;
  wire D;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:11" *)
  output Q;
  reg Q = 1'h0;
  (* src = "C:\\Users\\benhd\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\amaranth\\hdl\\_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "C:\\Users\\benhd\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\amaranth\\hdl\\_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:11" *)
  always @(posedge clk)
    Q <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2355:dump_module$5 ) begin end
    \$1  = Q;
    if (CE) begin
      \$1  = D;
    end
    if (rst) begin
      \$1  = 1'h0;
    end
  end
endmodule

(* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:14" *)
(* generator = "Amaranth" *)
module \Cpu.counter_PC.register8bit.U$2 (rst, CE, Q, D, clk);
  reg \$auto$verilog_backend.cc:2355:dump_module$6  = 0;
  reg \$1 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:9" *)
  input CE;
  wire CE;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:8" *)
  input D;
  wire D;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:11" *)
  output Q;
  reg Q = 1'h0;
  (* src = "C:\\Users\\benhd\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\amaranth\\hdl\\_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "C:\\Users\\benhd\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\amaranth\\hdl\\_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:11" *)
  always @(posedge clk)
    Q <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2355:dump_module$6 ) begin end
    \$1  = Q;
    if (CE) begin
      \$1  = D;
    end
    if (rst) begin
      \$1  = 1'h0;
    end
  end
endmodule

(* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:14" *)
(* generator = "Amaranth" *)
module \Cpu.counter_PC.register8bit.U$3 (rst, CE, Q, D, clk);
  reg \$auto$verilog_backend.cc:2355:dump_module$7  = 0;
  reg \$1 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:9" *)
  input CE;
  wire CE;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:8" *)
  input D;
  wire D;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:11" *)
  output Q;
  reg Q = 1'h0;
  (* src = "C:\\Users\\benhd\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\amaranth\\hdl\\_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "C:\\Users\\benhd\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\amaranth\\hdl\\_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:11" *)
  always @(posedge clk)
    Q <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2355:dump_module$7 ) begin end
    \$1  = Q;
    if (CE) begin
      \$1  = D;
    end
    if (rst) begin
      \$1  = 1'h0;
    end
  end
endmodule

(* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:14" *)
(* generator = "Amaranth" *)
module \Cpu.counter_PC.register8bit.U$4 (rst, CE, Q, D, clk);
  reg \$auto$verilog_backend.cc:2355:dump_module$8  = 0;
  reg \$1 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:9" *)
  input CE;
  wire CE;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:8" *)
  input D;
  wire D;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:11" *)
  output Q;
  reg Q = 1'h0;
  (* src = "C:\\Users\\benhd\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\amaranth\\hdl\\_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "C:\\Users\\benhd\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\amaranth\\hdl\\_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:11" *)
  always @(posedge clk)
    Q <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2355:dump_module$8 ) begin end
    \$1  = Q;
    if (CE) begin
      \$1  = D;
    end
    if (rst) begin
      \$1  = 1'h0;
    end
  end
endmodule

(* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:14" *)
(* generator = "Amaranth" *)
module \Cpu.counter_PC.register8bit.U$5 (rst, CE, Q, D, clk);
  reg \$auto$verilog_backend.cc:2355:dump_module$9  = 0;
  reg \$1 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:9" *)
  input CE;
  wire CE;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:8" *)
  input D;
  wire D;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:11" *)
  output Q;
  reg Q = 1'h0;
  (* src = "C:\\Users\\benhd\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\amaranth\\hdl\\_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "C:\\Users\\benhd\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\amaranth\\hdl\\_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:11" *)
  always @(posedge clk)
    Q <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2355:dump_module$9 ) begin end
    \$1  = Q;
    if (CE) begin
      \$1  = D;
    end
    if (rst) begin
      \$1  = 1'h0;
    end
  end
endmodule

(* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:14" *)
(* generator = "Amaranth" *)
module \Cpu.counter_PC.register8bit.U$6 (rst, CE, Q, D, clk);
  reg \$auto$verilog_backend.cc:2355:dump_module$10  = 0;
  reg \$1 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:9" *)
  input CE;
  wire CE;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:8" *)
  input D;
  wire D;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:11" *)
  output Q;
  reg Q = 1'h0;
  (* src = "C:\\Users\\benhd\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\amaranth\\hdl\\_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "C:\\Users\\benhd\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\amaranth\\hdl\\_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:11" *)
  always @(posedge clk)
    Q <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2355:dump_module$10 ) begin end
    \$1  = Q;
    if (CE) begin
      \$1  = D;
    end
    if (rst) begin
      \$1  = 1'h0;
    end
  end
endmodule

(* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:14" *)
(* generator = "Amaranth" *)
module \Cpu.counter_PC.register8bit.U$7 (rst, CE, Q, D, clk);
  reg \$auto$verilog_backend.cc:2355:dump_module$11  = 0;
  reg \$1 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:9" *)
  input CE;
  wire CE;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:8" *)
  input D;
  wire D;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:11" *)
  output Q;
  reg Q = 1'h0;
  (* src = "C:\\Users\\benhd\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\amaranth\\hdl\\_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "C:\\Users\\benhd\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\amaranth\\hdl\\_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:11" *)
  always @(posedge clk)
    Q <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2355:dump_module$11 ) begin end
    \$1  = Q;
    if (CE) begin
      \$1  = D;
    end
    if (rst) begin
      \$1  = 1'h0;
    end
  end
endmodule

(* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Registers.py:38" *)
(* generator = "Amaranth" *)
module \Cpu.register16_IR (clk, rst, Q, CE, \D$1 );
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:9" *)
  input CE;
  wire CE;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:9" *)
  wire \CE$10 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:9" *)
  wire \CE$13 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:9" *)
  wire \CE$16 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:9" *)
  wire \CE$19 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:9" *)
  wire \CE$22 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:9" *)
  wire \CE$25 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:9" *)
  wire \CE$28 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Registers.py:33" *)
  wire \CE$3 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:9" *)
  wire \CE$31 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:9" *)
  wire \CE$34 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:9" *)
  wire \CE$37 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:9" *)
  wire \CE$40 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:9" *)
  wire \CE$43 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:9" *)
  wire \CE$46 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:9" *)
  wire \CE$49 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:9" *)
  wire \CE$7 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:8" *)
  wire D;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Registers.py:32" *)
  input [15:0] \D$1 ;
  wire [15:0] \D$1 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:8" *)
  wire \D$12 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:8" *)
  wire \D$15 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:8" *)
  wire \D$18 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:8" *)
  wire \D$21 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:8" *)
  wire \D$24 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:8" *)
  wire \D$27 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:8" *)
  wire \D$30 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:8" *)
  wire \D$33 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:8" *)
  wire \D$36 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:8" *)
  wire \D$39 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:8" *)
  wire \D$42 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:8" *)
  wire \D$45 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:8" *)
  wire \D$48 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:8" *)
  wire \D$6 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:8" *)
  wire \D$9 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Registers.py:35" *)
  output [15:0] Q;
  wire [15:0] Q;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:11" *)
  wire \Q$11 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:11" *)
  wire \Q$14 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:11" *)
  wire \Q$17 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:11" *)
  wire \Q$20 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:11" *)
  wire \Q$23 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:11" *)
  wire \Q$26 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:11" *)
  wire \Q$29 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:11" *)
  wire \Q$32 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:11" *)
  wire \Q$35 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:11" *)
  wire \Q$38 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:11" *)
  wire \Q$41 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:11" *)
  wire \Q$44 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:11" *)
  wire \Q$47 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:11" *)
  wire \Q$5 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:11" *)
  wire \Q$50 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:11" *)
  wire \Q$8 ;
  (* src = "C:\\Users\\benhd\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\amaranth\\hdl\\_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "C:\\Users\\benhd\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\amaranth\\hdl\\_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Registers.py:43" *)
  \Cpu.register16_IR.U$0  \U$0  (
    .CE(CE),
    .D(\D$1 [0]),
    .Q(\Q$5 ),
    .clk(clk),
    .rst(rst)
  );
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Registers.py:43" *)
  \Cpu.register16_IR.U$1  \U$1  (
    .CE(CE),
    .D(\D$1 [1]),
    .Q(\Q$8 ),
    .clk(clk),
    .rst(rst)
  );
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Registers.py:43" *)
  \Cpu.register16_IR.U$10  \U$10  (
    .CE(CE),
    .D(\D$1 [10]),
    .Q(\Q$35 ),
    .clk(clk),
    .rst(rst)
  );
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Registers.py:43" *)
  \Cpu.register16_IR.U$11  \U$11  (
    .CE(CE),
    .D(\D$1 [11]),
    .Q(\Q$38 ),
    .clk(clk),
    .rst(rst)
  );
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Registers.py:43" *)
  \Cpu.register16_IR.U$12  \U$12  (
    .CE(CE),
    .D(\D$1 [12]),
    .Q(\Q$41 ),
    .clk(clk),
    .rst(rst)
  );
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Registers.py:43" *)
  \Cpu.register16_IR.U$13  \U$13  (
    .CE(CE),
    .D(\D$1 [13]),
    .Q(\Q$44 ),
    .clk(clk),
    .rst(rst)
  );
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Registers.py:43" *)
  \Cpu.register16_IR.U$14  \U$14  (
    .CE(CE),
    .D(\D$1 [14]),
    .Q(\Q$47 ),
    .clk(clk),
    .rst(rst)
  );
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Registers.py:43" *)
  \Cpu.register16_IR.U$15  \U$15  (
    .CE(CE),
    .D(\D$1 [15]),
    .Q(\Q$50 ),
    .clk(clk),
    .rst(rst)
  );
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Registers.py:43" *)
  \Cpu.register16_IR.U$2  \U$2  (
    .CE(CE),
    .D(\D$1 [2]),
    .Q(\Q$11 ),
    .clk(clk),
    .rst(rst)
  );
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Registers.py:43" *)
  \Cpu.register16_IR.U$3  \U$3  (
    .CE(CE),
    .D(\D$1 [3]),
    .Q(\Q$14 ),
    .clk(clk),
    .rst(rst)
  );
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Registers.py:43" *)
  \Cpu.register16_IR.U$4  \U$4  (
    .CE(CE),
    .D(\D$1 [4]),
    .Q(\Q$17 ),
    .clk(clk),
    .rst(rst)
  );
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Registers.py:43" *)
  \Cpu.register16_IR.U$5  \U$5  (
    .CE(CE),
    .D(\D$1 [5]),
    .Q(\Q$20 ),
    .clk(clk),
    .rst(rst)
  );
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Registers.py:43" *)
  \Cpu.register16_IR.U$6  \U$6  (
    .CE(CE),
    .D(\D$1 [6]),
    .Q(\Q$23 ),
    .clk(clk),
    .rst(rst)
  );
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Registers.py:43" *)
  \Cpu.register16_IR.U$7  \U$7  (
    .CE(CE),
    .D(\D$1 [7]),
    .Q(\Q$26 ),
    .clk(clk),
    .rst(rst)
  );
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Registers.py:43" *)
  \Cpu.register16_IR.U$8  \U$8  (
    .CE(CE),
    .D(\D$1 [8]),
    .Q(\Q$29 ),
    .clk(clk),
    .rst(rst)
  );
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Registers.py:43" *)
  \Cpu.register16_IR.U$9  \U$9  (
    .CE(CE),
    .D(\D$1 [9]),
    .Q(\Q$32 ),
    .clk(clk),
    .rst(rst)
  );
  assign D = \D$1 [0];
  assign \CE$3  = CE;
  assign \D$6  = \D$1 [1];
  assign \CE$7  = CE;
  assign \D$9  = \D$1 [2];
  assign \CE$10  = CE;
  assign \D$12  = \D$1 [3];
  assign \CE$13  = CE;
  assign \D$15  = \D$1 [4];
  assign \CE$16  = CE;
  assign \D$18  = \D$1 [5];
  assign \CE$19  = CE;
  assign \D$21  = \D$1 [6];
  assign \CE$22  = CE;
  assign \D$24  = \D$1 [7];
  assign \CE$25  = CE;
  assign \D$27  = \D$1 [8];
  assign \CE$28  = CE;
  assign \D$30  = \D$1 [9];
  assign \CE$31  = CE;
  assign \D$33  = \D$1 [10];
  assign \CE$34  = CE;
  assign \D$36  = \D$1 [11];
  assign \CE$37  = CE;
  assign \D$39  = \D$1 [12];
  assign \CE$40  = CE;
  assign \D$42  = \D$1 [13];
  assign \CE$43  = CE;
  assign \D$45  = \D$1 [14];
  assign \CE$46  = CE;
  assign \D$48  = \D$1 [15];
  assign \CE$49  = CE;
  assign Q[15] = \Q$50 ;
  assign Q[14] = \Q$47 ;
  assign Q[13] = \Q$44 ;
  assign Q[12] = \Q$41 ;
  assign Q[11] = \Q$38 ;
  assign Q[10] = \Q$35 ;
  assign Q[9] = \Q$32 ;
  assign Q[8] = \Q$29 ;
  assign Q[7] = \Q$26 ;
  assign Q[6] = \Q$23 ;
  assign Q[5] = \Q$20 ;
  assign Q[4] = \Q$17 ;
  assign Q[3] = \Q$14 ;
  assign Q[2] = \Q$11 ;
  assign Q[1] = \Q$8 ;
  assign Q[0] = \Q$5 ;
endmodule

(* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:14" *)
(* generator = "Amaranth" *)
module \Cpu.register16_IR.U$0 (clk, rst, Q, CE, D);
  reg \$auto$verilog_backend.cc:2355:dump_module$12  = 0;
  reg \$1 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:9" *)
  input CE;
  wire CE;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:8" *)
  input D;
  wire D;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:11" *)
  output Q;
  reg Q = 1'h0;
  (* src = "C:\\Users\\benhd\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\amaranth\\hdl\\_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "C:\\Users\\benhd\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\amaranth\\hdl\\_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:11" *)
  always @(posedge clk)
    Q <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2355:dump_module$12 ) begin end
    \$1  = Q;
    if (CE) begin
      \$1  = D;
    end
    if (rst) begin
      \$1  = 1'h0;
    end
  end
endmodule

(* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:14" *)
(* generator = "Amaranth" *)
module \Cpu.register16_IR.U$1 (clk, rst, Q, CE, D);
  reg \$auto$verilog_backend.cc:2355:dump_module$13  = 0;
  reg \$1 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:9" *)
  input CE;
  wire CE;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:8" *)
  input D;
  wire D;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:11" *)
  output Q;
  reg Q = 1'h0;
  (* src = "C:\\Users\\benhd\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\amaranth\\hdl\\_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "C:\\Users\\benhd\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\amaranth\\hdl\\_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:11" *)
  always @(posedge clk)
    Q <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2355:dump_module$13 ) begin end
    \$1  = Q;
    if (CE) begin
      \$1  = D;
    end
    if (rst) begin
      \$1  = 1'h0;
    end
  end
endmodule

(* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:14" *)
(* generator = "Amaranth" *)
module \Cpu.register16_IR.U$10 (clk, rst, Q, CE, D);
  reg \$auto$verilog_backend.cc:2355:dump_module$14  = 0;
  reg \$1 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:9" *)
  input CE;
  wire CE;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:8" *)
  input D;
  wire D;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:11" *)
  output Q;
  reg Q = 1'h0;
  (* src = "C:\\Users\\benhd\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\amaranth\\hdl\\_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "C:\\Users\\benhd\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\amaranth\\hdl\\_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:11" *)
  always @(posedge clk)
    Q <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2355:dump_module$14 ) begin end
    \$1  = Q;
    if (CE) begin
      \$1  = D;
    end
    if (rst) begin
      \$1  = 1'h0;
    end
  end
endmodule

(* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:14" *)
(* generator = "Amaranth" *)
module \Cpu.register16_IR.U$11 (clk, rst, Q, CE, D);
  reg \$auto$verilog_backend.cc:2355:dump_module$15  = 0;
  reg \$1 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:9" *)
  input CE;
  wire CE;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:8" *)
  input D;
  wire D;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:11" *)
  output Q;
  reg Q = 1'h0;
  (* src = "C:\\Users\\benhd\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\amaranth\\hdl\\_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "C:\\Users\\benhd\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\amaranth\\hdl\\_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:11" *)
  always @(posedge clk)
    Q <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2355:dump_module$15 ) begin end
    \$1  = Q;
    if (CE) begin
      \$1  = D;
    end
    if (rst) begin
      \$1  = 1'h0;
    end
  end
endmodule

(* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:14" *)
(* generator = "Amaranth" *)
module \Cpu.register16_IR.U$12 (clk, rst, Q, CE, D);
  reg \$auto$verilog_backend.cc:2355:dump_module$16  = 0;
  reg \$1 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:9" *)
  input CE;
  wire CE;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:8" *)
  input D;
  wire D;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:11" *)
  output Q;
  reg Q = 1'h0;
  (* src = "C:\\Users\\benhd\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\amaranth\\hdl\\_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "C:\\Users\\benhd\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\amaranth\\hdl\\_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:11" *)
  always @(posedge clk)
    Q <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2355:dump_module$16 ) begin end
    \$1  = Q;
    if (CE) begin
      \$1  = D;
    end
    if (rst) begin
      \$1  = 1'h0;
    end
  end
endmodule

(* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:14" *)
(* generator = "Amaranth" *)
module \Cpu.register16_IR.U$13 (clk, rst, Q, CE, D);
  reg \$auto$verilog_backend.cc:2355:dump_module$17  = 0;
  reg \$1 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:9" *)
  input CE;
  wire CE;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:8" *)
  input D;
  wire D;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:11" *)
  output Q;
  reg Q = 1'h0;
  (* src = "C:\\Users\\benhd\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\amaranth\\hdl\\_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "C:\\Users\\benhd\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\amaranth\\hdl\\_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:11" *)
  always @(posedge clk)
    Q <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2355:dump_module$17 ) begin end
    \$1  = Q;
    if (CE) begin
      \$1  = D;
    end
    if (rst) begin
      \$1  = 1'h0;
    end
  end
endmodule

(* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:14" *)
(* generator = "Amaranth" *)
module \Cpu.register16_IR.U$14 (clk, rst, Q, CE, D);
  reg \$auto$verilog_backend.cc:2355:dump_module$18  = 0;
  reg \$1 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:9" *)
  input CE;
  wire CE;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:8" *)
  input D;
  wire D;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:11" *)
  output Q;
  reg Q = 1'h0;
  (* src = "C:\\Users\\benhd\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\amaranth\\hdl\\_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "C:\\Users\\benhd\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\amaranth\\hdl\\_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:11" *)
  always @(posedge clk)
    Q <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2355:dump_module$18 ) begin end
    \$1  = Q;
    if (CE) begin
      \$1  = D;
    end
    if (rst) begin
      \$1  = 1'h0;
    end
  end
endmodule

(* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:14" *)
(* generator = "Amaranth" *)
module \Cpu.register16_IR.U$15 (clk, rst, Q, CE, D);
  reg \$auto$verilog_backend.cc:2355:dump_module$19  = 0;
  reg \$1 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:9" *)
  input CE;
  wire CE;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:8" *)
  input D;
  wire D;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:11" *)
  output Q;
  reg Q = 1'h0;
  (* src = "C:\\Users\\benhd\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\amaranth\\hdl\\_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "C:\\Users\\benhd\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\amaranth\\hdl\\_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:11" *)
  always @(posedge clk)
    Q <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2355:dump_module$19 ) begin end
    \$1  = Q;
    if (CE) begin
      \$1  = D;
    end
    if (rst) begin
      \$1  = 1'h0;
    end
  end
endmodule

(* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:14" *)
(* generator = "Amaranth" *)
module \Cpu.register16_IR.U$2 (clk, rst, Q, CE, D);
  reg \$auto$verilog_backend.cc:2355:dump_module$20  = 0;
  reg \$1 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:9" *)
  input CE;
  wire CE;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:8" *)
  input D;
  wire D;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:11" *)
  output Q;
  reg Q = 1'h0;
  (* src = "C:\\Users\\benhd\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\amaranth\\hdl\\_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "C:\\Users\\benhd\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\amaranth\\hdl\\_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:11" *)
  always @(posedge clk)
    Q <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2355:dump_module$20 ) begin end
    \$1  = Q;
    if (CE) begin
      \$1  = D;
    end
    if (rst) begin
      \$1  = 1'h0;
    end
  end
endmodule

(* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:14" *)
(* generator = "Amaranth" *)
module \Cpu.register16_IR.U$3 (clk, rst, Q, CE, D);
  reg \$auto$verilog_backend.cc:2355:dump_module$21  = 0;
  reg \$1 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:9" *)
  input CE;
  wire CE;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:8" *)
  input D;
  wire D;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:11" *)
  output Q;
  reg Q = 1'h0;
  (* src = "C:\\Users\\benhd\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\amaranth\\hdl\\_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "C:\\Users\\benhd\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\amaranth\\hdl\\_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:11" *)
  always @(posedge clk)
    Q <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2355:dump_module$21 ) begin end
    \$1  = Q;
    if (CE) begin
      \$1  = D;
    end
    if (rst) begin
      \$1  = 1'h0;
    end
  end
endmodule

(* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:14" *)
(* generator = "Amaranth" *)
module \Cpu.register16_IR.U$4 (clk, rst, Q, CE, D);
  reg \$auto$verilog_backend.cc:2355:dump_module$22  = 0;
  reg \$1 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:9" *)
  input CE;
  wire CE;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:8" *)
  input D;
  wire D;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:11" *)
  output Q;
  reg Q = 1'h0;
  (* src = "C:\\Users\\benhd\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\amaranth\\hdl\\_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "C:\\Users\\benhd\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\amaranth\\hdl\\_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:11" *)
  always @(posedge clk)
    Q <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2355:dump_module$22 ) begin end
    \$1  = Q;
    if (CE) begin
      \$1  = D;
    end
    if (rst) begin
      \$1  = 1'h0;
    end
  end
endmodule

(* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:14" *)
(* generator = "Amaranth" *)
module \Cpu.register16_IR.U$5 (clk, rst, Q, CE, D);
  reg \$auto$verilog_backend.cc:2355:dump_module$23  = 0;
  reg \$1 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:9" *)
  input CE;
  wire CE;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:8" *)
  input D;
  wire D;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:11" *)
  output Q;
  reg Q = 1'h0;
  (* src = "C:\\Users\\benhd\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\amaranth\\hdl\\_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "C:\\Users\\benhd\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\amaranth\\hdl\\_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:11" *)
  always @(posedge clk)
    Q <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2355:dump_module$23 ) begin end
    \$1  = Q;
    if (CE) begin
      \$1  = D;
    end
    if (rst) begin
      \$1  = 1'h0;
    end
  end
endmodule

(* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:14" *)
(* generator = "Amaranth" *)
module \Cpu.register16_IR.U$6 (clk, rst, Q, CE, D);
  reg \$auto$verilog_backend.cc:2355:dump_module$24  = 0;
  reg \$1 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:9" *)
  input CE;
  wire CE;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:8" *)
  input D;
  wire D;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:11" *)
  output Q;
  reg Q = 1'h0;
  (* src = "C:\\Users\\benhd\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\amaranth\\hdl\\_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "C:\\Users\\benhd\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\amaranth\\hdl\\_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:11" *)
  always @(posedge clk)
    Q <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2355:dump_module$24 ) begin end
    \$1  = Q;
    if (CE) begin
      \$1  = D;
    end
    if (rst) begin
      \$1  = 1'h0;
    end
  end
endmodule

(* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:14" *)
(* generator = "Amaranth" *)
module \Cpu.register16_IR.U$7 (clk, rst, Q, CE, D);
  reg \$auto$verilog_backend.cc:2355:dump_module$25  = 0;
  reg \$1 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:9" *)
  input CE;
  wire CE;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:8" *)
  input D;
  wire D;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:11" *)
  output Q;
  reg Q = 1'h0;
  (* src = "C:\\Users\\benhd\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\amaranth\\hdl\\_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "C:\\Users\\benhd\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\amaranth\\hdl\\_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:11" *)
  always @(posedge clk)
    Q <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2355:dump_module$25 ) begin end
    \$1  = Q;
    if (CE) begin
      \$1  = D;
    end
    if (rst) begin
      \$1  = 1'h0;
    end
  end
endmodule

(* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:14" *)
(* generator = "Amaranth" *)
module \Cpu.register16_IR.U$8 (clk, rst, Q, CE, D);
  reg \$auto$verilog_backend.cc:2355:dump_module$26  = 0;
  reg \$1 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:9" *)
  input CE;
  wire CE;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:8" *)
  input D;
  wire D;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:11" *)
  output Q;
  reg Q = 1'h0;
  (* src = "C:\\Users\\benhd\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\amaranth\\hdl\\_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "C:\\Users\\benhd\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\amaranth\\hdl\\_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:11" *)
  always @(posedge clk)
    Q <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2355:dump_module$26 ) begin end
    \$1  = Q;
    if (CE) begin
      \$1  = D;
    end
    if (rst) begin
      \$1  = 1'h0;
    end
  end
endmodule

(* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:14" *)
(* generator = "Amaranth" *)
module \Cpu.register16_IR.U$9 (clk, rst, Q, CE, D);
  reg \$auto$verilog_backend.cc:2355:dump_module$27  = 0;
  reg \$1 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:9" *)
  input CE;
  wire CE;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:8" *)
  input D;
  wire D;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:11" *)
  output Q;
  reg Q = 1'h0;
  (* src = "C:\\Users\\benhd\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\amaranth\\hdl\\_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "C:\\Users\\benhd\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\amaranth\\hdl\\_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:11" *)
  always @(posedge clk)
    Q <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2355:dump_module$27 ) begin end
    \$1  = Q;
    if (CE) begin
      \$1  = D;
    end
    if (rst) begin
      \$1  = 1'h0;
    end
  end
endmodule

(* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Registers.py:15" *)
(* generator = "Amaranth" *)
module \Cpu.register8_ACC (rst, \D$1 , CE, Q, clk);
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:9" *)
  input CE;
  wire CE;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:9" *)
  wire \CE$10 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:9" *)
  wire \CE$13 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:9" *)
  wire \CE$16 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:9" *)
  wire \CE$19 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:9" *)
  wire \CE$22 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:9" *)
  wire \CE$25 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Registers.py:10" *)
  wire \CE$3 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:9" *)
  wire \CE$7 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:8" *)
  wire D;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Registers.py:9" *)
  input [7:0] \D$1 ;
  wire [7:0] \D$1 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:8" *)
  wire \D$12 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:8" *)
  wire \D$15 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:8" *)
  wire \D$18 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:8" *)
  wire \D$21 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:8" *)
  wire \D$24 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:8" *)
  wire \D$6 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:8" *)
  wire \D$9 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Registers.py:12" *)
  output [7:0] Q;
  wire [7:0] Q;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:11" *)
  wire \Q$11 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:11" *)
  wire \Q$14 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:11" *)
  wire \Q$17 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:11" *)
  wire \Q$20 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:11" *)
  wire \Q$23 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:11" *)
  wire \Q$26 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:11" *)
  wire \Q$5 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:11" *)
  wire \Q$8 ;
  (* src = "C:\\Users\\benhd\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\amaranth\\hdl\\_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "C:\\Users\\benhd\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\amaranth\\hdl\\_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Registers.py:20" *)
  \Cpu.register8_ACC.U$0  \U$0  (
    .CE(CE),
    .D(\D$1 [0]),
    .Q(\Q$5 ),
    .clk(clk),
    .rst(rst)
  );
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Registers.py:20" *)
  \Cpu.register8_ACC.U$1  \U$1  (
    .CE(CE),
    .D(\D$1 [1]),
    .Q(\Q$8 ),
    .clk(clk),
    .rst(rst)
  );
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Registers.py:20" *)
  \Cpu.register8_ACC.U$2  \U$2  (
    .CE(CE),
    .D(\D$1 [2]),
    .Q(\Q$11 ),
    .clk(clk),
    .rst(rst)
  );
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Registers.py:20" *)
  \Cpu.register8_ACC.U$3  \U$3  (
    .CE(CE),
    .D(\D$1 [3]),
    .Q(\Q$14 ),
    .clk(clk),
    .rst(rst)
  );
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Registers.py:20" *)
  \Cpu.register8_ACC.U$4  \U$4  (
    .CE(CE),
    .D(\D$1 [4]),
    .Q(\Q$17 ),
    .clk(clk),
    .rst(rst)
  );
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Registers.py:20" *)
  \Cpu.register8_ACC.U$5  \U$5  (
    .CE(CE),
    .D(\D$1 [5]),
    .Q(\Q$20 ),
    .clk(clk),
    .rst(rst)
  );
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Registers.py:20" *)
  \Cpu.register8_ACC.U$6  \U$6  (
    .CE(CE),
    .D(\D$1 [6]),
    .Q(\Q$23 ),
    .clk(clk),
    .rst(rst)
  );
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\Registers.py:20" *)
  \Cpu.register8_ACC.U$7  \U$7  (
    .CE(CE),
    .D(\D$1 [7]),
    .Q(\Q$26 ),
    .clk(clk),
    .rst(rst)
  );
  assign D = \D$1 [0];
  assign \CE$3  = CE;
  assign \D$6  = \D$1 [1];
  assign \CE$7  = CE;
  assign \D$9  = \D$1 [2];
  assign \CE$10  = CE;
  assign \D$12  = \D$1 [3];
  assign \CE$13  = CE;
  assign \D$15  = \D$1 [4];
  assign \CE$16  = CE;
  assign \D$18  = \D$1 [5];
  assign \CE$19  = CE;
  assign \D$21  = \D$1 [6];
  assign \CE$22  = CE;
  assign \D$24  = \D$1 [7];
  assign \CE$25  = CE;
  assign Q[7] = \Q$26 ;
  assign Q[6] = \Q$23 ;
  assign Q[5] = \Q$20 ;
  assign Q[4] = \Q$17 ;
  assign Q[3] = \Q$14 ;
  assign Q[2] = \Q$11 ;
  assign Q[1] = \Q$8 ;
  assign Q[0] = \Q$5 ;
endmodule

(* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:14" *)
(* generator = "Amaranth" *)
module \Cpu.register8_ACC.U$0 (rst, D, CE, Q, clk);
  reg \$auto$verilog_backend.cc:2355:dump_module$28  = 0;
  reg \$1 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:9" *)
  input CE;
  wire CE;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:8" *)
  input D;
  wire D;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:11" *)
  output Q;
  reg Q = 1'h0;
  (* src = "C:\\Users\\benhd\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\amaranth\\hdl\\_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "C:\\Users\\benhd\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\amaranth\\hdl\\_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:11" *)
  always @(posedge clk)
    Q <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2355:dump_module$28 ) begin end
    \$1  = Q;
    if (CE) begin
      \$1  = D;
    end
    if (rst) begin
      \$1  = 1'h0;
    end
  end
endmodule

(* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:14" *)
(* generator = "Amaranth" *)
module \Cpu.register8_ACC.U$1 (rst, D, CE, Q, clk);
  reg \$auto$verilog_backend.cc:2355:dump_module$29  = 0;
  reg \$1 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:9" *)
  input CE;
  wire CE;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:8" *)
  input D;
  wire D;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:11" *)
  output Q;
  reg Q = 1'h0;
  (* src = "C:\\Users\\benhd\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\amaranth\\hdl\\_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "C:\\Users\\benhd\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\amaranth\\hdl\\_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:11" *)
  always @(posedge clk)
    Q <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2355:dump_module$29 ) begin end
    \$1  = Q;
    if (CE) begin
      \$1  = D;
    end
    if (rst) begin
      \$1  = 1'h0;
    end
  end
endmodule

(* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:14" *)
(* generator = "Amaranth" *)
module \Cpu.register8_ACC.U$2 (rst, D, CE, Q, clk);
  reg \$auto$verilog_backend.cc:2355:dump_module$30  = 0;
  reg \$1 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:9" *)
  input CE;
  wire CE;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:8" *)
  input D;
  wire D;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:11" *)
  output Q;
  reg Q = 1'h0;
  (* src = "C:\\Users\\benhd\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\amaranth\\hdl\\_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "C:\\Users\\benhd\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\amaranth\\hdl\\_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:11" *)
  always @(posedge clk)
    Q <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2355:dump_module$30 ) begin end
    \$1  = Q;
    if (CE) begin
      \$1  = D;
    end
    if (rst) begin
      \$1  = 1'h0;
    end
  end
endmodule

(* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:14" *)
(* generator = "Amaranth" *)
module \Cpu.register8_ACC.U$3 (rst, D, CE, Q, clk);
  reg \$auto$verilog_backend.cc:2355:dump_module$31  = 0;
  reg \$1 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:9" *)
  input CE;
  wire CE;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:8" *)
  input D;
  wire D;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:11" *)
  output Q;
  reg Q = 1'h0;
  (* src = "C:\\Users\\benhd\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\amaranth\\hdl\\_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "C:\\Users\\benhd\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\amaranth\\hdl\\_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:11" *)
  always @(posedge clk)
    Q <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2355:dump_module$31 ) begin end
    \$1  = Q;
    if (CE) begin
      \$1  = D;
    end
    if (rst) begin
      \$1  = 1'h0;
    end
  end
endmodule

(* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:14" *)
(* generator = "Amaranth" *)
module \Cpu.register8_ACC.U$4 (rst, D, CE, Q, clk);
  reg \$auto$verilog_backend.cc:2355:dump_module$32  = 0;
  reg \$1 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:9" *)
  input CE;
  wire CE;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:8" *)
  input D;
  wire D;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:11" *)
  output Q;
  reg Q = 1'h0;
  (* src = "C:\\Users\\benhd\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\amaranth\\hdl\\_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "C:\\Users\\benhd\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\amaranth\\hdl\\_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:11" *)
  always @(posedge clk)
    Q <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2355:dump_module$32 ) begin end
    \$1  = Q;
    if (CE) begin
      \$1  = D;
    end
    if (rst) begin
      \$1  = 1'h0;
    end
  end
endmodule

(* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:14" *)
(* generator = "Amaranth" *)
module \Cpu.register8_ACC.U$5 (rst, D, CE, Q, clk);
  reg \$auto$verilog_backend.cc:2355:dump_module$33  = 0;
  reg \$1 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:9" *)
  input CE;
  wire CE;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:8" *)
  input D;
  wire D;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:11" *)
  output Q;
  reg Q = 1'h0;
  (* src = "C:\\Users\\benhd\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\amaranth\\hdl\\_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "C:\\Users\\benhd\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\amaranth\\hdl\\_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:11" *)
  always @(posedge clk)
    Q <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2355:dump_module$33 ) begin end
    \$1  = Q;
    if (CE) begin
      \$1  = D;
    end
    if (rst) begin
      \$1  = 1'h0;
    end
  end
endmodule

(* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:14" *)
(* generator = "Amaranth" *)
module \Cpu.register8_ACC.U$6 (rst, D, CE, Q, clk);
  reg \$auto$verilog_backend.cc:2355:dump_module$34  = 0;
  reg \$1 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:9" *)
  input CE;
  wire CE;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:8" *)
  input D;
  wire D;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:11" *)
  output Q;
  reg Q = 1'h0;
  (* src = "C:\\Users\\benhd\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\amaranth\\hdl\\_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "C:\\Users\\benhd\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\amaranth\\hdl\\_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:11" *)
  always @(posedge clk)
    Q <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2355:dump_module$34 ) begin end
    \$1  = Q;
    if (CE) begin
      \$1  = D;
    end
    if (rst) begin
      \$1  = 1'h0;
    end
  end
endmodule

(* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:14" *)
(* generator = "Amaranth" *)
module \Cpu.register8_ACC.U$7 (rst, D, CE, Q, clk);
  reg \$auto$verilog_backend.cc:2355:dump_module$35  = 0;
  reg \$1 ;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:9" *)
  input CE;
  wire CE;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:8" *)
  input D;
  wire D;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:11" *)
  output Q;
  reg Q = 1'h0;
  (* src = "C:\\Users\\benhd\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\amaranth\\hdl\\_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "C:\\Users\\benhd\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\amaranth\\hdl\\_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "C:\\Users\\benhd\\PycharmProjects\\SimpleCPU-Python-HDLSim\\SimpleCPUv1a_amaranth\\components\\FlipFlops.py:11" *)
  always @(posedge clk)
    Q <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2355:dump_module$35 ) begin end
    \$1  = Q;
    if (CE) begin
      \$1  = D;
    end
    if (rst) begin
      \$1  = 1'h0;
    end
  end
endmodule
